/* Hybridircd conf ---UTF-8 ---Security configuration ---v8.2BasicConfigure <Unstable program!!!>
 * 这只是一个基础的设置(模板)文件 它可能需要根据您的需求进行调整
 * !!!!此文件已经经过实际测试,可以使用最新版本正常运行!!!!
 * 支持的注释风格 # // /**/
 * 包含文件 .include "filename" 和 .include <filename>
 * 
 * 您可以在以下文档中查询详细设置来完善此设置,我们的设置基于官方文档
 * https://github.com/ircd-hybrid/ircd-hybrid/blob/8.2.x/doc/reference.ircd.conf
 */


/*
 * serverinfo {}:  服务器信息
 */
serverinfo {
	name = "irc.arkfuture.test";
	sid = "0AF";
	description = "ARKFUTURE-NET IRC server";
	network_name = "ARKFUTURE";
	network_description = "ARKFUTURE-NET IRC server";

	hub = no;

	default_max_clients = 512;
	max_nick_length = 15;
	max_topic_length = 300;

	rsa_private_key_file = "/etc/ircd-hybrid/key/ircd.key";
	tls_certificate_file = "/etc/ircd-hybrid/key/ircd.pem";
	tls_dh_param_file = "/etc/ircd-hybrid/key/dhparam.pem";
#	tls_supported_groups = "X25519:P-256";
#	tls_cipher_list = "ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA:AES256-SHA";
#	tls_cipher_suites = "TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256";
#	tls_message_digest_algorithm = "sha256";
};


/*
 * admin {}:  管理员信息
 */
admin {
	name = "arkfuture";
	description = "Server Administrator";
	email = "arkfuture@i2pmail.org";
};


/*
 * class {}:  用户类信息
 */
class {
	name = "users";
	ping_time = 90 seconds;
	number_per_ip_local = 2;
	number_per_ip_global = 8;
	max_number = 100;
	cidr_bitlen_ipv4 = 24;
	cidr_bitlen_ipv6 = 120;
	number_per_cidr = 16;
	sendq = 100 kbytes;
	recvq = 2560 bytes;
};

class {
	name = "opers";
	ping_time = 90 seconds;
	number_per_ip_local = 10;
	max_number = 100;
	sendq = 100 kbytes;
	max_channels = 60;
	min_idle = 3 hours;
	max_idle = 8 hours;
	flags = random_idle, hide_idle_from_opers;
};

class {
	name = "server";
	ping_time = 90 seconds;
	connectfreq = 5 minutes;
	max_number = 1;
	sendq = 2 megabytes;
};


/*
 * motd {}: 允许根据客户端的来源显示不同的消息 仅适用于本地用户
 */
motd {
	mask = "*.*"
	file = "/etc/ircd-hybrid/german.motd";
};


/*
 * listen {}:  包含有关ircd监听端口的信息 这样的格式以此类推
 */
listen {
	port = 6667,6668,6669;

	/* 
	 * 注意: "flags"指令始终要在"port"之前
	 * 目前可用的标志有:
	 *
	 *  tls    - 端口只能接受TLS连接 
	 *  server - 只允许服务器连接 
	 *  client - 只允许客户端连接 
	 *  defer  - 延迟接受新连接，直到数据准备好读取 
	 *  hidden - 端口对/stats P隐藏 除非你是管理员 
	 */
	flags = hidden, tls;
	#host = "0.0.0.0";
	port = 6697;
};


/*
 * auth {}:  允许用户连接到ircd 块必须按优先级顺序指定
 */
auth {
	user = "*@*";
	#password = "letmein";
	#encrypted = yes;

	/* 将用户的主机伪造为此 */
	spoof = "ARKFUTURE";

	/* 用户所属的类别 */
	class = "opers";

	flags = need_ident;
};


/*
 * operator {}:  定义ircd操作员
 */
operator {
	/* name: 操作员名 */
	name = "arkfuture";
	user = "*@*";
	password = "$5$x5zof8qe.Yc7/bPp$5zIg1Le2Lsgd4CvOjaD20pr5PmcfD7ha/9b2.TaUyG4";
	encrypted = yes;

	/* 通过额外检查操作员的客户端证书指纹与下面指定的指纹来增强安全性 */
#	tls_certificate_fingerprint = "4C62287BA6776A89CD4F8FF10A62FFB35E79319F51AF6C62C674984974FCCB1D";
	/* 客户端必须通过TLS连接才能使用此 operator {} 块, 默认为no */
#	tls_connection_required = no;
	class = "opers";
#	whois = "is a Smurf Target (IRC Operator)";
#	umodes = locops, servnotice, wallop;
	flags = admin, connect, connect:remote, die, globops, kill, kill:remote,kline, module, rehash, restart, set, unkline, unxline, xline;
};


/*
 * connect {}: 定义要连接的服务器
 */
#connect {
#	name = "uplink.example.net";
#	host = "192.0.2.4";
#	bind = "192.0.2.5";
#	send_password = "password";
#	accept_password = "anotherpassword";
#	encrypted = no;
#	hub_mask = "*";
##	leaf_mask = "*.uk";
#	aftype = ipv6;
#	class = "server";
##	tls_cipher_list = "ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA:AES256-SHA";
##	tls_certificate_fingerprint = "4C62287BA6776A89CD4F8FF10A62FFB35E79319F51AF6C62C674984974FCCB1D";
##	flags = autoconn, tls;
#};


/*
 * cluster {}:  自动共享klines/unkline/xline/unxline/resv/unresv/locops的服务器
 */
#cluster {
#	name = "*.example.net";
#	type = kline, unkline, locops, xline, resv;
#};


/*
 * shared {}: 允许远程kline的用户
 */
shared {
	name = "hybrid8.debian.local";
	user = "root@localhost";
	type = kline, unkline, resv;
};


/*
 * kill {}:  不允许连接的用户
 */
#kill {
#	user = "bad@*.example.net";
#	reason = "Obviously hacked account";
#};


/*
 * deny {}:  不允许连接的IP地址
 */
#deny {
#	ip = "192.0.2.0/28";
#	reason = "Reconnecting vhosted bots";
#};


/*
 * exempt {}:  免除 deny {} 和Dlines的IP地址 'ip'指令可以堆叠
 */
#exempt {
#	ip = "192.0.2.240/28";
#	ip = "10.0.0.0/8";
#	ip = "fc00::/7";
#};


/*
 * resv {}:  用户不得使用/加入(use/join)的昵称和频道 
 */
resv { mask = "clone*"; reason = "Clone bots"; };
resv { mask = "Global"; reason = "Reserved for services"; };
resv { mask = "ChanServ"; reason = "Reserved for services"; };
resv { mask = "NickServ"; reason = "Reserved for services"; };
resv { mask = "OperServ"; reason = "Reserved for services"; };
resv { mask = "MemoServ"; reason = "Reserved for services"; };
resv { mask = "BotServ"; reason = "Reserved for services"; };
resv { mask = "HelpServ"; reason = "Reserved for services"; };
resv { mask = "HostServ"; reason = "Reserved for services"; };
resv { mask = "StatServ"; reason = "Reserved for services"; };
resv { mask = "#*services*"; reason = "Reserved for services"; };


/*
 * gecos {}:  基于他们的"realname"禁止用户.
 */
#gecos {
#	name = "*sex*";
#	reason = "Possible spambot";
#};

#gecos {
#	name = "sub7server";
#	reason = "Trojan drone";
#};


/*
 * service {}: 指定可作为网络服务的服务器 'name'指令可以堆叠
 *
 * NOTE: 注意：网络上每个服务器都必须有相同的 service {} 块
 */
#service {
#   name = "service.example.net";
#   name = "stats.example.net";
#};


/*
 * pseudo {}: 添加 伪命令/自定义(pseudo/custom) 命令 也称为服务别名
 */
#pseudo {
#	/* command: 实际的 命令/别名(command/alias). */
#	command = "IDENTIFY";
#
#	/* prepend: 可以附加到用户消息前面的可选文本. */
#	prepend = "IDENTIFY ";
#
#	/* name: 服务名称 用于错误消息. */
#	name = "NickServ";
#
#	/* target: 此消息应发送到的实际目标. */
#	target = "NickServ@service.example.net";
#};
#
#pseudo {
#	command = "CHANSERV";
#	name = "ChanServ";
#	target = "ChanServ@service.example.net";
#};
#
#pseudo {
#	command = "CS";
#	name = "ChanServ";
#	target = "ChanServ@service.example.net";
#};
#
#pseudo {
#	command = "NICKSERV";
#	name = "NickServ";
#	target = "NickServ@service.example.net";
#};
#
#pseudo {
#	command = "NS";
#	name = "NickServ";
#	target = "NickServ@service.example.net";
#};
#
#pseudo {
#	command = "MEMOSERV";
#	name = "MemoServ";
#	target = "MemoServ@service.example.net";
#};
#
#pseudo {
#	command = "MS";
#	name = "MemoServ";
#	target = "MemoServ@service.example.net";
#};
#
#pseudo {
#	command = "OPERSERV";
#	name = "OperServ";
#	target = "OperServ@service.example.net";
#};
#
#pseudo {
#	command = "OS";
#	name = "OperServ";
#	target = "OperServ@service.example.net";
#};
#
#pseudo {
#	command = "HOSTSERV";
#	name = "HostServ";
#	target = "HostServ@service.example.net";
#};
#
#pseudo {
#	command = "HS";
#	name = "HostServ";
#	target = "HostServ@service.example.net";
#};
#
#pseudo {
#	command = "BOTSERV";
#	name = "BotServ";
#	target = "BotServ@service.example.net";
#};
#
#pseudo {
#	command = "BS";
#	name = "BotServ";
#	target = "BotServ@service.example.net";
#};


/*
 * channel {}:  频道块包含与频道相关的选项
 */
channel {
	enable_extbans = no;

	disable_fake_channels = yes;

	invite_client_count = 10;
	invite_client_time = 5 minutes;
	invite_delay_channel = 5 seconds;
	invite_expire_time = 1 hour;

	knock_client_count = 1;
	knock_client_time = 5 minutes;
	knock_delay_channel = 1 minute;

	
	max_channels = 25;
	max_invites = 20;
	max_bans = 100;
	max_bans_large = 500;

	default_join_flood_count = 18;
	default_join_flood_time = 6 seconds;
};


/*
 * serverhide {}:  serverhide块包含有关服务器隐藏的选项
 */
serverhide {
	disable_remote_commands = no;

	flatten_links = no;
	flatten_links_delay = 5 minutes;
	flatten_links_file = "/var/cache/ircd-hybrid/links.txt";

	hidden = no;
	hide_servers = no;
	hide_services = no;
	hidden_name = "*.example.net";
	hide_server_ips = no;
};


/*
 * general {}:  general块包含曾经在config.h的选项中编译的许多选项
 */
general {
	cycle_on_host_change = yes;

	max_monitor = 50;

	max_accept = 50;

	whowas_history_length = 15000;

	dline_min_cidr = 16;

	dline_min_cidr6 = 48;

	kline_min_cidr = 16;

	kline_min_cidr6 = 48;

	invisible_on_connect = yes;

	kill_chase_time_limit = 30 seconds;

	disable_auth = no;

	default_floodcount = 10;

	default_floodtime = 1 second;

	failed_oper_notice = yes;

	specials_in_ident = 2;

	min_nonwildcard = 4;

	min_nonwildcard_simple = 3;

	anti_nick_flood = yes;

	max_nick_changes = 5;
	max_nick_time = 20 seconds;

	away_count = 2;
	away_time = 10 seconds;

	anti_spam_exit_message_time = 5 minutes;

	ts_warn_delta = 3 seconds;
	ts_max_delta = 15 seconds;

	warn_no_connect_block = yes;

	stats_e_disabled = no;

	stats_m_oper_only = yes;

	stats_o_oper_only = yes;

	stats_P_oper_only = yes;

	stats_u_oper_only = no;

	stats_i_oper_only = yes;

	stats_k_oper_only = yes;

	caller_id_wait = 1 minute;

	opers_bypass_callerid = yes;

	pace_wait_simple = 1 second;

	pace_wait = 10 seconds;

	short_motd = no;

	ping_cookie = no;

	no_oper_flood = yes;

	max_targets = 4;

	oper_only_umodes = bot, cconn, external, farconnect, flood, hidden,locops, nchange, rej, skill, spy, expiration;

	oper_umodes = flood, locops, servnotice, wallop;

	throttle_count = 1;

	enable_owner = no;

	enable_admin = no;


	throttle_time = 2 seconds;
};


modules {
	/*
	 * path: 下面指定的模块和其他路径
	 * 以及在 "/module load" 中搜索模块
	 */
	path = "/usr/lib/ircd-hybrid/modules";
#	path = "/usr/local/lib/ircd-hybrid/modules/extra";
	path = "/usr/lib/ircd-hybrid/modules/autoload";

	/* module: 启动/重新哈希(startup/rehash) 时加载的模块名称 */
#	module = "some_module.la";
};


/*
 * log {}: 包含有关日志文件的信息 file {} 块可以多个
 */
log {
	/* 您想启用对 ircd.log 的记录吗 */
	use_logging = yes;

	file {
		type = oper;
		name = "/var/log/ircd/ircd-hybrid-oper.log";
		size = 50 megabytes;
	};

};
