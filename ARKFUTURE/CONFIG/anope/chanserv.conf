/*
 * ChanServ 的示例配置文件.
 */
 

service 
{
	/*
	 * ChanServ 客户端的名称.
	 * 如果修改此值, 可能也需要修改 chanserv 模块配置中的 client 指令.
	 */
	nick = "ChanServ"
 
	/*
	 * ChanServ 客户端的用户名.
	 */
	user = "services"
 
	/*
	 * ChanServ 客户端的主机名.
	 */
	host = "services.host" 
 
	/*
	 * ChanServ 客户端的真实姓名.
	 */
	gecos = "Channel Registration Service"
 
	/*
	 * 该客户端应使用的模式.
	 * 除非你明确知道自己在做什么, 否则不要修改此项.
	 *
	 * 这些模式高度依赖于 IRCd. 如果注释掉, 将根据加载的协议模块使用合理的默认值.
	 *
	 * 注意: 错误设置此选项可能会破坏客户端的部分或全部功能. 如果因此导致客户端无法执行某些操作, 我们将不提供支持.
	 */
	#modes = "+o"
 
	/*
	 * 可选参数: 本服务应加入的频道列表(逗号分隔). 
	 * 除日志频道外, 此设置作用不大, 因为服务仅会在指定频道中闲置, 不会接受任何命令.
	 *
	 * 可使用模式字符或前缀符号为频道添加前缀.
	 */
	#channels = "@#services,#mychan"
}


/*
 * ChanServ 核心模块.
 *
 * 提供 ChanServ 的基本功能.
 */
module 
{
	name = "chanserv"
 
	/*
	 * 作为 ChanServ 的客户端名称.
	 */
	client = "ChanServ"
 
	/*
	 * 新注册频道的默认选项. 注意: 修改这些选项不会影响已注册的频道. 列表必须用空格分隔.
	 *
	 * 可用选项:
	 * -      keeptopic: 频道闲置时保留主题 
	 * -          peace: 禁止用户踢出或移除同级/上级权限用户的模式 
	 * -     cs_private: 在 ChanServ 的 LIST 命令中隐藏频道 
	 * -     restricted: 踢出/封禁被频道限制的用户 
	 * -      cs_secure: 启用频道安全机制, 要求用户通过 NickServ 认证才能进入频道访问列表 
	 * -      secureops: 仅允许访问列表中的用户获得操作员状态 
	 * -  securefounder: 仅允许频道真实创始人执行删除频道/修改密码/更改创始人或继任者操作 
	 * -       signkick: 使用 ChanServ 的 KICK 命令时会在踢出消息中署名的昵称 
	 * - signkick_level: 同上, 但当用户权限≥目标用户时不签名 
	 * -      topiclock: 仅允许通过 ChanServ 的 TOPIC 命令修改主题 
	 * -        persist: 始终保持频道开放 
	 * -       noautoop: 禁用频道自动OP功能 
	 * -  cs_keep_modes: 启用保留模式, 频道闲置时保持模式设置 
	 * -   cs_no_expire: 启用永不过期. 需要创始人/继任者(若设置)或访问列表中的用户是注册昵称, 否则频道将被删除 
	 * -           none: 无默认选项 
	 *
	 * 此为可选指令. 若留空, 默认选项为 keeptopic, cs_secure, securefounder 和 signkick. 
	 * 如需完全无默认值, 请单独使用 "none" 选项.
	 */
	defaults = "keeptopic peace cs_secure securefounder signkick"
 
	/*
	 * 单个昵称可注册的最大频道数.
	 *
	 * 此为可选但推荐配置. 
	 * 若未设置, 单个昵称注册频道数量将无限制.
	 */
	maxregistered = 20 
 
	/*
	 * 频道注册过期前的有效时长.
	 *
	 * 此为可选但推荐配置.
	 * 若未设置, 默认为 14 天.
	 */
	expire = 14d 
 
	/*
	 * 频道访问列表的最大条目数.
	 * 若未设置, 默认为 1024. 设为 0 表示无限制.
	 */
	accessmax = 1024 
 
	/*
	 * 当 ChanServ 踢出未授权用户后(仅当该用户是频道唯一成员时), 在频道停留的时长.
	 */
	inhabit = 15s 
 
	/*
	 * 仅允许 IRC 操作员使用 ChanServ.
	 *
	 * 此为可选指令.
	 */
	#opersonly = yes 
 
	/*
	 * 禁止锁定的模式. 操作员专属模式(如 +O)始终限制普通用户使用, 不受此设置影响.
	 * 注释此项表示无限制.
	 */
	#nomlock = "P"
 
	/*
	 * 所有注册频道必须设置且仅能设置的模式.
	 * 这些模式不可锁定或解锁. 注册频道模式(如存在)始终自动为必需模式.
	 */
	#require = "r"
 
	/*
	 * 用户命令(如 chanserv/kick 和 chanserv/ban)中原因字段的最大长度.
	 */
	reasonmax = 200 
 
	/*
	 * 签名踢出消息的格式化模板.
	 * %n 表示踢人者昵称 
	 * %m 表示指定消息 
	 */
	signkickformat = "%m (%n)"
 
	/*
	 * 若启用, 将禁止频道访问条目包含主机掩码.
	 */
	disallow_hostmask_access = false 
 
	/*
	 * 若启用, 将禁止频道出现在访问列表中.
	 */
	disallow_channel_access = false 
 
	/*
	 * 若启用, ChanServ 始终将注册频道的时间戳设为注册日期.
	 * 这能避免多种竞态条件: 未授权用户加入空注册频道后, 可能在服务取消其操作权限前设置模式等.
	 */
	always_lower_ts = false 
}


/*
 * ChanServ 权限配置.
 *
 * ChanServ 权限用于确定用户在频道中的访问级别. 核心模块默认使用以下定义的权限集. 
 * 权限等级(rank)决定权限间的相对强度, Anope 据此判定用户在频道中的更高访问权.
 *
 * 加载 cs_access 模块后, 可为权限定义等级(level), 用于 chanserv/access 和 chanserv/levels 命令.
 * 定义的等级将作为新注册频道的默认权限等级.
 * "founder" 是特殊等级, 表示拥有频道 FOUNDER 权限的用户自动获得该权限. 
 * "disabled" 表示无人(包括创始人)可使用该权限.
 *
 * 加载 cs_flags 模块后, 可定义关联权限标志(flag)用于 chanserv/flags 命令.
 *
 * 加载 cs_xop 模块后, 可定义关联的 XOP 命令.
 *
 * 权限名称用于关联频道模式. 若 IRCd 支持定义额外频道状态模式(如 InspIRCd), 
 * 可通过适当命名权限(从而关联访问等级/标志/XOP)关联到模式. 
 * 例如: 若有名为 admin 的频道模式, 可创建 AUTOADMIN, ADMIN 和 ADMINME 权限自动关联该模式.
 *
 * 除非有专门检查特定权限的模块(如第三方模块), 否则在此定义新权限无实际意义.
 *
 * 下方提供合理的默认配置, 除非需要修改默认行为, 否则无需编辑.
 */
 
/*
 * ACCESS_CHANGE 权限.
 *
 * 被 chanserv/access, chanserv/flags 和 chanserv/xop 使用.
 *
 * 拥有此权限的用户可修改他人权限.
 */
privilege 
{
	name = "ACCESS_CHANGE"
	rank = 0 
	level = 10 
	flag = "f"
	xop = "SOP"
}
 
/*
 * ACCESS_LIST 权限.
 *
 * 被 chanserv/access, chanserv/flags 和 chanserv/xop 使用.
 *
 * 拥有此权限的用户可查看频道访问列表.
 */
privilege 
{
	name = "ACCESS_LIST"
	rank = 10 
	level = 3 
	flag = "f"
	xop = "VOP"
}
 
/*
 * AKICK 权限.
 *
 * 被 chanserv/akick 和 chanserv/enforce 使用.
 *
 * 拥有此权限的用户可修改 AKICK 列表.
 */
privilege 
{
	name = "AKICK"
	rank = 250 
	level = 10 
	flag = "K"
	xop = "SOP"
}
 
/*
 * ASSIGN 权限.
 *
 * 被 botserv/assign 使用.
 *
 * 拥有此权限的用户可分配/取消分配 BotServ 机器人到频道.
 */
privilege 
{
	name = "ASSIGN"
	rank = 270 
	level = "founder"
	flag = "s"
	xop = "QOP"
}
 
/*
 * AUTOHALFOP 权限.
 *
 * 被核心模块使用.
 *
 * 拥有此权限的用户在加入时自动获得半操作员(halfop)权限.
 */
privilege 
{
	name = "AUTOHALFOP"
	rank = 100 
	level = 4 
	flag = "H"
	xop = "HOP"
}
 
/*
 * AUTOOP 权限.
 *
 * 被核心模块使用.
 *
 * 拥有此权限的用户在加入时自动获得操作员(op)权限.
 */
privilege 
{
	name = "AUTOOP"
	rank = 210 
	level = 5 
	flag = "O"
	xop = "AOP"
}
 
/*
 * AUTOOWNER 权限.
 *
 * 被核心模块使用.
 *
 * 拥有此权限的用户在加入时自动获得所有者(owner)权限.
 */
privilege 
{
	name = "AUTOOWNER"
	rank = 330 
	level = 9999 
	flag = "Q"
	xop = "QOP"
}
 
/*
 * AUTOPROTECT 权限.
 *
 * 被核心模块使用.
 *
 * 拥有此权限的用户在加入时自动获得保护者(protect)权限.
 */
privilege 
{
	name = "AUTOPROTECT"
	rank = 240 
	level = 10 
	flag = "A"
	xop = "SOP"
}
 
/*
 * AUTOVOICE 权限.
 *
 * 被核心模块使用.
 *
 * 拥有此权限的用户在加入时自动获得语音(voice)权限.
 */
privilege 
{
	name = "AUTOVOICE"
	rank = 50 
	level = 3 
	flag = "V"
	xop = "VOP"
}
 
/*
 * BADWORDS 权限.
 *
 * 被 botserv/badwords 使用.
 *
 * 拥有此权限的用户可修改 BotServ 的违禁词列表.
 */
privilege 
{
	name = "BADWORDS"
	rank = 260 
	level = 10 
	flag = "K"
	xop = "SOP"
}
 
/*
 * BAN 权限.
 *
 * 被 chanserv/ban 使用.
 *
 * 拥有此权限的用户可使用 BAN 命令.
 */
privilege 
{
	name = "BAN"
	rank = 150 
	level = 4 
	flag = "b"
	xop = "HOP"
}
 
/*
 * FANTASIA 权限.
 *
 * 被 botserv/main 和 chanserv/xop 使用.
 *
 * 拥有此权限的用户可在频道中使用幻想命令.
 */
privilege 
{
	name = "FANTASIA"
	rank = 30 
	level = 3 
	flag = "c"
	xop = "VOP"
}

/*
 * FOUNDER 特权.
 *
 * 用于 chanserv/access, chanserv/akick,
 * chanserv/drop, chanserv/set/founder,
 * chanserv/set/securefounder, chanserv/set/successor 和 chanserv/xop.
 *
 * 拥有此权限的用户被视为创始人, 并且可以使用 
 * 仅限于创始人的命令.
 */
privilege
{
	name = "FOUNDER"
	rank = 360
	level = 10000 
	flag = "F"
	xop = "QOP"
}
 
/*
 * GETKEY 特权.
 *
 * 用于 chanserv/getkey 和 nickserv/ajoin.
 *
 * 拥有此权限的用户可以通过 GETKEY 获取其频道密钥, 并且 
 * 可以使用 nickserv/ajoin 加入带密钥的频道.
 */
privilege 
{
	name = "GETKEY"
	rank = 180
	level = 5
	flag = "G"
	xop = "AOP"
}
 
/*
 * HALFOP 特权.
 *
 * 用于 chanserv/mode, chanserv/halfop 和 chanserv/dehalfop.
 *
 * 拥有此权限的用户可以使用 ChanServ 在频道中将他人半操作或取消半操作.
 */
privilege 
{
	name = "HALFOP"
	rank = 120
	level = 5
	flag = "h"
	xop = "AOP"
}
 
/*
 * HALFOPME 特权.
 *
 * 用于 chanserv/mode, chanserv/halfop 和 chanserv/dehalfop.
 *
 * 拥有此权限的用户可以使用 ChanServ 在频道中将自己半操作或取消半操作.
 */
privilege
{
	name = "HALFOPME"
	rank = 110
	level = 4
	flag = "h"
	xop = "HOP"
}
 
/*
 * INFO 特权.
 *
 * 用于 botserv/info 和 chanserv/info.
 *
 * 拥有此权限的用户允许从 BotServ 和 ChanServ 获取完整的 INFO 输出.
 */
privilege
{
	name = "INFO"
	rank = 80
	level = 9999 
	flag = "I"
	xop = "QOP"
}
 
/*
 * INVITE 特权.
 *
 * 用于 chanserv/invite 和 nickserv/ajoin.
 *
 * 拥有此权限的用户可以通过 ChanServ 邀请用户, 并且
 * 使用 nickserv/ajoin 加入仅邀请频道.
 */
privilege 
{
	name = "INVITE"
	rank = 190 
	level = 5 
	flag = "i"
	xop = "AOP"
}
 
/*
 * KICK 特权.
 *
 * 用于 chanserv/kick.
 *
 * 拥有此权限的用户可以使用 KICK 命令.
 */
privilege 
{
	name = "KICK"
	rank = 130
	level = 4
	flag = "k"
	xop = "HOP"
}
 
/*
 * MEMO 特权.
 *
 * 用于 memoserv/del, memoserv/ignore, memoserv/info, memoserv/list,
 * memoserv/main, memoserv/read 和 memoserv/set.
 *
 * 拥有此权限的用户可以管理频道备忘录.
 */
privilege 
{
	name = "MEMO"
	rank = 280
	level = 10
	flag = "m"
	xop = "SOP"
}
 
/*
 * MODE 特权.
 *
 * 用于 chanserv/mode.
 *
 * 拥有此权限的用户可以通过 ChanServ 设置模式并更改
 * 模式锁定.
 */
privilege 
{
	name = "MODE"
	rank = 170
	level = 9999 
	flag = "s"
	xop = "QOP"
}
 
/*
 * NOKICK 特权.
 *
 * 用于 botserv/kick.
 *
 * 拥有此权限的用户可免受自动 BotServ 踢出.
 */
privilege 
{
	name = "NOKICK"
	rank = 20 
	level = 1 
	flag = "N"
	xop = "VOP"
}
 
/*
 * OP 特权.
 *
 * 用于 chanserv/mode, chanserv/modes.
 *
 * 拥有此权限的用户可以使用 ChanServ 在频道中将他人操作或取消操作.
 */
privilege 
{
	name = "OP"
	rank = 230 
	level = 5 
	flag = "o"
	xop = "SOP"
}
 
/*
 * OPME 特权.
 *
 * 用于 chanserv/mode, chanserv/modes.
 *
 * 拥有此权限的用户可以使用 ChanServ 在频道中将自己操作或取消操作.
 */
privilege 
{
	name = "OPME"
	rank = 220
	level = 5
	flag = "o"
	xop = "AOP"
}
 
/*
 * OWNER 特权.
 *
 * 用于 chanserv/mode 和 chanserv/modes.
 *
 * 拥有此权限的用户可以使用 ChanServ 在频道中将他人所有者化或取消所有者化.
 */
privilege
{
	name = "OWNER"
	rank = 350 
	level = "founder"
	flag = "q"
	xop = "QOP"
}
 
/*
 * OWNERME 特权.
 *
 * 用于 chanserv/mode 和 chanserv/modes.
 *
 * 拥有此权限的用户可以使用 ChanServ 在频道中将自己所有者化或取消所有者化.
 */
privilege 
{
	name = "OWNERME"
	rank = 340 
	level = 9999
	flag = "q"
	xop = "QOP"
}
 
/*
 * PROTECT 特权.
 *
 * 用于 chanserv/mode 和 chanserv/modes.
 *
 * 拥有此权限的用户可以使用 ChanServ 在频道中将他人保护或取消保护.
 */
privilege
{
	name = "PROTECT"
	rank = 310
	level = 9999 
	flag = "a"
	xop = "QOP"
}
 
/*
 * PROTECTME 特权.
 *
 * 用于 chanserv/mode 和 chanserv/modes.
 *
 * 拥有此权限的用户可以使用 ChanServ 在频道中将自己保护或取消保护.
 */
privilege
{
	name = "PROTECTME"
	rank = 300 
	level = 10 
	flag = "a"
	xop = "AOP"
}
 
/*
 * SAY 特权.
 *
 * 用于 botserv/control.
 *
 * 拥有此权限的用户可以使用频道中的 BotServ 机器人说出消息或执行 /me 动作.
 */
privilege 
{
	name = "SAY"
	rank = 90
	level = 5
	flag = "B"
	xop = "AOP"
}
 
/*
 * SET 特权.
 *
 * 用于 botserv/kick, botserv/set, chanserv/clone, chanserv/log,
 * chanserv/saset/noexpire 和 chanserv/set.
 *
 * 拥有此权限的用户可以设置 BotServ 踢出的理由, 更改
 * BotServ 和 ChanServ 的设置, 克隆 ChanServ 频道设置, 以及 
 * 设置 ChanServ 日志选项.
 */
privilege
{
	name = "SET"
	rank = 320
	level = 9999 
	flag = "s"
	xop = "QOP"
}
 
/*
 * SIGNKICK 特权.
 *
 * 用于 chanserv/ban 和 chanserv/kick.
 *
 * 当 SIGNKICK 设置设为 LEVEL 时, 拥有此权限的用户不会在通过 ChanServ 的踢出中显示其昵称.
 */
privilege 
{
	name = "SIGNKICK"
	rank = 140
	level = 9999 
	flag = "K"
	xop = "QOP"
}
 
/*
 * TOPIC 特权.
 *
 * 用于 chanserv/topic.
 *
 * 拥有此权限的用户可以通过 ChanServ 更改频道主题.
 */
privilege 
{
	name = "TOPIC"
	rank = 160
	level = 5
	flag = "t"
	xop = "AOP"
}
 
/*
 * UNBAN 特权.
 *
 * 用于 chanserv/unban.
 *
 * 拥有此权限的用户可以通过 ChanServ 解除自己或他人的封禁.
 */
privilege
{
	name = "UNBAN"
	rank = 200
	level = 4
	flag = "u"
	xop = "HOP"
}
 
/*
 * VOICE 特权.
 *
 * 用于 chanserv/mode 和 chanserv/modes.
 *
 * 拥有此权限的用户可以使用 ChanServ 在频道中将他人发言或取消发言.
 */
privilege
{
	name = "VOICE"
	rank = 70 
	level = 4 
	flag = "v"
	xop = "HOP"
}
 
/*
 * VOICEME 特权.
 *
 * 用于 chanserv/mode 和 chanserv/modes.
 *
 * 拥有此权限的用户可以使用 ChanServ 在频道中将自己发言或取消发言.
 */
privilege 
{
	name = "VOICEME"
	rank = 60
	level = 3
	flag = "v"
	xop = "VOP"
}


/*
 * 核心 ChanServ 命令.
 *
 * 在 Anope 中, 模块可以提供 (多个) 命令, 每个命令有唯一的命令名称. 加载这些模块后,
 * 您可以配置这些命令添加到任何客户端, 使用任意名称.
 *
 * 此外, 您可能需要提供一个权限名称, 该权限必须包含在执行命令的用户的操作类型中.
 *
 * 下面提供了合理的默认值, 除非您希望更改默认行为, 否则无需编辑.
 */
 
/* ChanServ 的命令组配置.
 *
 * 命令可以选择性地分组, 以使 ChanServ 的 HELP 输出更易于理解.
 * 删除以下组以使用旧的行为, 即简单地从 HELP 列出所有 ChanServ 命令.
 */
command_group
{
	name = "chanserv/access"
	description = _("Used to manage the list of privileged users")
}
 
command_group
{
	name = "chanserv/status"
	description = _("Used to modify the channel status of you or other users")
}
 
command_group 
{
	name = "chanserv/management"
	description = _("Used to manage channels")
}
 
command_group 
{
	name = "chanserv/admin"
	description = _("Services Operator commands")
}
 
/* 为其提供一个帮助命令. */
command { service = "ChanServ"; name = "HELP"; command = "generic/help"; }

/*
 * cs_access 
 *
 * 提供命令 chanserv/access 和 chanserv/levels.
 * 提供基于等级的访问系统 "levels".
 *
 * 用于通过等级系统授予用户频道访问权限. 允许在频道级别重新定义特定等级对应的权限.
 *
 * chanserv/access 的 "LIST" 子命令将显示频道上的所有访问条目, 包括非由 cs_access 添加的条目.
 * 这些条目的 "level" 字段将展示其他访问系统对条目的解释, 可能是 XOP 命令名称或一组标记.
 */
module { name = "cs_access" }
command { service = "ChanServ"; name = "ACCESS"; command = "chanserv/access"; group = "chanserv/access"; }
command { service = "ChanServ"; name = "LEVELS"; command = "chanserv/levels"; group = "chanserv/access"; }
 
/*
 * cs_akick 
 *
 * 提供命令 chanserv/akick.
 *
 * 用于阻止用户加入频道.
 */
module 
{
	name = "cs_akick"
 
	/*
	 * 频道自动踢出列表的最大条目数.
	 */
	autokickmax = 32 
 
	/*
	 * 未指定时的默认自动踢出原因.
	 */
	autokickreason = "User has been banned from the channel"
}
command { service = "ChanServ"; name = "AKICK"; command = "chanserv/akick"; group = "chanserv/management"; }
 
/*
 * cs_ban 
 *
 * 提供命令 chanserv/ban.
 *
 * 可通过命令块中的配置选项 'kick' 控制封禁后是否踢出用户 (默认 'yes').
 * 通过 'mode' 选项控制封禁模式类型 (如 BAN 或 QUIET, 默认 BAN).
 *
 * 用于封禁用户进入频道.
 */
module { name = "cs_ban" }
command { service = "ChanServ"; name = "BAN"; command = "chanserv/ban"; }
 
/*
 * cs_clone 
 *
 * 提供命令 chanserv/clone.
 *
 * 用于将频道设置从一个频道复制到另一个频道.
 */
module { name = "cs_clone" }
command { service = "ChanServ"; name = "CLONE"; command = "chanserv/clone"; group = "chanserv/management"; }
 
/*
 * cs_drop 
 *
 * 提供命令 chanserv/drop.
 *
 * 用于注销频道注册.
 */
module { name = "cs_drop" }
command { service = "ChanServ"; name = "DROP"; command = "chanserv/drop"; }
 
/*
 * cs_enforce 
 *
 * 提供命令 chanserv/enforce.
 *
 * 用于强制执行频道设置 (如 secureops 和 restricted).
 */
module { name = "cs_enforce" }
command { service = "ChanServ"; name = "ENFORCE"; command = "chanserv/enforce"; group = "chanserv/management"; }
 
/*
 * cs_entrymsg 
 *
 * 提供命令 chanserv/entrymsg.
 *
 * 用于配置用户加入频道时发送的欢迎消息.
 */
module 
{
	name = "cs_entrymsg"
 
	/* 每个频道允许的最大欢迎消息数量 (未设置时默认 5). */
	maxentries = 5 
}
command { service = "ChanServ"; name = "ENTRYMSG"; command = "chanserv/entrymsg"; group = "chanserv/management"; }
 
/*
 * cs_flags 
 *
 * 提供命令 chanserv/flags.
 * 提供基于标记的访问系统 "flags".
 *
 * 用于通过标记系统授予用户频道访问权限.
 *
 * chanserv/flags 的 "LIST" 子命令将显示频道上的所有访问条目, 包括非由 cs_flags 添加的条目.
 * 这些条目的 "flags" 字段将展示访问条目授予的权限标记组合.
 */
module { name = "cs_flags" }
command { service = "ChanServ"; name = "FLAGS"; command = "chanserv/flags"; group = "chanserv/access"; }
 
/*
 * cs_getkey 
 *
 * 提供命令 chanserv/getkey.
 *
 * 用于获取频道密钥.
 */
module { name = "cs_getkey" }
command { service = "ChanServ"; name = "GETKEY"; command = "chanserv/getkey"; }
 
/*
 * cs_info 
 *
 * 提供命令 chanserv/info.
 *
 * 用于获取频道信息.
 */
module { name = "cs_info" }
command { service = "ChanServ"; name = "INFO"; command = "chanserv/info"; }
 
/*
 * cs_invite 
 *
 * 提供命令 chanserv/invite.
 *
 * 用于邀请自己进入频道.
 */
module { name = "cs_invite" }
command { service = "ChanServ"; name = "INVITE"; command = "chanserv/invite"; }
 
/*
 * cs_kick 
 *
 * 提供命令 chanserv/kick.
 *
 * 用于踢出频道用户.
 */
module { name = "cs_kick" }
command { service = "ChanServ"; name = "KICK"; command = "chanserv/kick"; }
 
/*
 * cs_list 
 *
 * 提供命令:
 *   chanserv/list - 用于检索和搜索已注册频道列表 
 *   chanserv/set/private - 设置频道是否在 chanserv/list 中显示 
 */
module 
{
	name = "cs_list"
 
	/*
	 * ChanServ LIST 命令最多返回的频道数量.
	 */
	listmax = 50 
}
command { service = "ChanServ"; name = "LIST"; command = "chanserv/list"; }
 
command { service = "ChanServ"; name = "SET PRIVATE"; command = "chanserv/set/private"; }
 
/*
 * cs_log 
 *
 * 提供命令 chanserv/log.
 *
 * 用于配置频道操作的日志记录方式和位置.
 */
module 
{
	name = "cs_log"
 
	/* 新注册频道的默认日志设置 */
 
	#default 
	{
		command = "chanserv/modes"
		method = "MESSAGE @"
	}
 
	#default 
	{
		service = "ChanServ"
		command = "ACCESS"
		method = "MESSAGE @"
	}
 
	#default 
	{
		command = "chanserv/xop"
		method = "MESSAGE @"
	}
 
	#default 
	{
		service = "ChanServ"
		command = "FLAGS"
		method = "MESSAGE @"
	}
}
command { service = "ChanServ"; name = "LOG"; command = "chanserv/log"; group = "chanserv/management"; }

/*
 * cs_mode
 *
 * 提供 chanserv/mode 和 chanserv/modes 命令.
 *
 * 用于更改模式锁(mode locks)和修改频道模式. 多个命令可映射到 chanserv/modes,
 * 配置指令 'set' 和 'unset' 用于指定执行命令时应设置或取消的模式.
 */
module
{
	name = "cs_mode"
 
	/*
	 * 模式锁的默认模式, 这些模式会在新注册频道时设置.
	 *
	 * 如未设置, 默认为 +nt.
	 */
	mlock = "+nt"
 
	/*
	 * 模式锁列表允许的最大条目数量.
	 *
	 * 此指令为可选配置.
	 */
	max = 32
}
command { service = "ChanServ"; name = "MODE"; command = "chanserv/mode"; group = "chanserv/management"; }
 
command { service = "ChanServ"; name = "OWNER"; command = "chanserv/modes"; group = "chanserv/status"; set = "OWNER" }
command { service = "ChanServ"; name = "DEOWNER"; command = "chanserv/modes"; group = "chanserv/status"; unset = "OWNER" }
 
command { service = "ChanServ"; name = "PROTECT"; command = "chanserv/modes"; group = "chanserv/status"; set = "PROTECT" }
command { service = "ChanServ"; name = "DEPROTECT"; command = "chanserv/modes"; group = "chanserv/status"; unset = "PROTECT" }
 
command { service = "ChanServ"; name = "OP"; command = "chanserv/modes"; group = "chanserv/status"; set = "OP" }
command { service = "ChanServ"; name = "DEOP"; command = "chanserv/modes"; group = "chanserv/status"; unset = "OP" }
 
command { service = "ChanServ"; name = "HALFOP"; command = "chanserv/modes"; group = "chanserv/status"; set = "HALFOP" }
command { service = "ChanServ"; name = "DEHALFOP"; command = "chanserv/modes"; group = "chanserv/status"; unset = "HALFOP" }
 
command { service = "ChanServ"; name = "VOICE"; command = "chanserv/modes"; group = "chanserv/status"; set = "VOICE" }
command { service = "ChanServ"; name = "DEVOICE"; command = "chanserv/modes"; group = "chanserv/status"; unset = "VOICE" }
 
 
/*
 * cs_register
 *
 * 提供 chanserv/register 命令.
 *
 * 用于注册频道.
 */
module { name = "cs_register" }
command { service = "ChanServ"; name = "REGISTER"; command = "chanserv/register"; }
 
/*
 * cs_seen
 *
 * 提供 chanserv/seen 和 operserv/seen 命令.
 *
 * 记录用户最后出现时间及活动状态, 允许用户查询这些数据.
 * 管理员可查看统计数据并清理数据库.
 */
module
{
	name = "cs_seen"
 
	/* 如启用, 使用资源消耗较低的 1.8 旧版 seen 机制 */
	simple = false 
 
	/* 设置 seen 数据库条目的保留时间 */
	purgetime = "30d"
}
command { service = "OperServ"; name = "SEEN"; command = "operserv/seen"; permission = "operserv/seen"; }
 
/*
 * cs_set
 *
 * 提供以下命令:
 *   chanserv/set 和 chanserv/saset - SET 命令的虚拟帮助封装 
 *   chanserv/set/autoop - 配置 ChanServ 是否自动授予用户频道状态
 *   chanserv/set/bantype - 控制频道禁止令(ban)的格式 
 *   chanserv/set/description - 修改频道描述
 *   chanserv/set/founder - 更改频道创始人 
 *   chanserv/set/keepmodes - 启用/禁用 keepmodes(保留频道模式)
 *   chanserv/set/peace - 配置用户是否能踢出权限高于自己的用户 
 *   chanserv/set/persist - 设置当最后用户离开后 ChanServ 是否保持驻留
 *   chanserv/set/restricted - 设置未列入频道访问列表的用户是否能加入
 *   chanserv/set/secure - 设置已识别账户用户是否自动获得频道权限 
 *   chanserv/set/securefounder - 设置频道创始人权限是否为完整权限 
 *   chanserv/set/secureops - 限制频道管理员权限仅授予频道访问列表中的用户
 *   chanserv/set/signkick - 设置 signkick(在踢人信息后附加操作者名称)
 *   chanserv/set/successor - 设置频道继承人(当创始人账户过期时接任)
 *   chanserv/saset/noexpire - 设置 noexpire(防止频道过期)
 *
 * 此为虚拟命令, 为各种 SET 命令提供统一的帮助入口.
 */
module
{
	name = "cs_set"
 
	/*
	 * 新注册频道的默认禁止令类型.
	 *
	 * defbantype 可选值:
	 *
	 * 0: *!user@host 格式 
	 * 1: *!*user@host 格式 
	 * 2: *!*@host 格式
	 * 3: *!*user@*.domain 格式 
	 */
	defbantype = 2 
 
	/*
	 * 如启用, 持久频道的创建时间将回溯至原始注册日期.
	 */
	persist_lower_ts = true 
}
command { service = "ChanServ"; name = "SET"; command = "chanserv/set"; group = "chanserv/management"; }
command { service = "ChanServ"; name = "SET AUTOOP"; command = "chanserv/set/autoop"; }
command { service = "ChanServ"; name = "SET BANTYPE"; command = "chanserv/set/bantype"; }
command { service = "ChanServ"; name = "SET DESCRIPTION"; command = "chanserv/set/description"; }
command { service = "ChanServ"; name = "SET DESC"; command = "chanserv/set/description"; hide = yes; }
command { service = "ChanServ"; name = "SET FOUNDER"; command = "chanserv/set/founder"; }
command { service = "ChanServ"; name = "SET KEEPMODES"; command = "chanserv/set/keepmodes"; }
command { service = "ChanServ"; name = "SET PEACE"; command = "chanserv/set/peace"; }
command { service = "ChanServ"; name = "SET PERSIST"; command = "chanserv/set/persist"; }
command { service = "ChanServ"; name = "SET RESTRICTED"; command = "chanserv/set/restricted"; }
command { service = "ChanServ"; name = "SET SECURE"; command = "chanserv/set/secure"; }
command { service = "ChanServ"; name = "SET SECUREFOUNDER"; command = "chanserv/set/securefounder"; }
command { service = "ChanServ"; name = "SET SECUREOPS"; command = "chanserv/set/secureops"; }
command { service = "ChanServ"; name = "SET SIGNKICK"; command = "chanserv/set/signkick"; }
command { service = "ChanServ"; name = "SET SUCCESSOR"; command = "chanserv/set/successor"; }
command { service = "ChanServ"; name = "SET NOEXPIRE"; command = "chanserv/saset/noexpire"; permission = "chanserv/saset/noexpire"; }
 
/*
 * cs_set_misc
 *
 * 提供 chanserv/set/misc 命令.
 *
 * 允许创建自定义命令设置数据, 并在 chanserv/info 中显示.
 * 可通过 misc_description 字段添加帮助说明.
 */
module { name = "cs_set_misc" }
command { service = "ChanServ"; name = "SET URL"; command = "chanserv/set/misc"; misc_description = _("为频道关联 URL"); }
command { service = "ChanServ"; name = "SET EMAIL"; command = "chanserv/set/misc"; misc_description = _("为频道关联电子邮箱地址"); }
 
/*
 * cs_status 
 *
 * 提供 chanserv/status 命令.
 *
 * 用于检测用户在频道的权限状态,
 * 及是否匹配自动踢除规则.
 */
module { name = "cs_status" }
command { service = "ChanServ"; name = "STATUS"; command = "chanserv/status"; }
 
/*
 * cs_suspend
 *
 * 提供 chanserv/suspend 和 chanserv/unsuspend 命令.
 *
 * 用于冻结/解冻频道. 冻结频道不可用但保留配置.
 */
module
{
	name = "cs_suspend"
 
	/*
	 * 冻结频道的有效期限.
	 *
	 * 此指令为可选配置.
	 * 如未设置, 则默认永不过期.
	 */
	expire = 90d
 
	/*
	 * 向非管理员用户显示的冻结信息项.
	 * 注释此配置将完全禁止向非管理员显示任何冻结信息.
	 */
	show = "suspended, by, reason, on, expires"
}
command { service = "ChanServ"; name = "SUSPEND"; command = "chanserv/suspend"; permission = "chanserv/suspend"; group = "chanserv/admin"; }
command { service = "ChanServ"; name = "UNSUSPEND"; command = "chanserv/unsuspend"; permission = "chanserv/suspend"; group = "chanserv/admin"; }
 
/*
 * cs_sync 
 *
 * 提供 chanserv/sync 命令.
 *
 * 同步用户的频道状态模式与其权限设置.
 */
module { name = "cs_sync" }
command { service = "ChanServ"; name = "SYNC"; command = "chanserv/sync"; group = "chanserv/management"; }
 
/*
 * cs_topic 
 *
 * 提供以下命令:
 *   chanserv/topic - 修改频道主题(结合 topiclock 使用)
 *   chanserv/set/keeptopic - 配置频道创建时是否恢复原主题
 */
module { name = "cs_topic" }
command { service = "ChanServ"; name = "TOPIC"; command = "chanserv/topic"; group = "chanserv/management"; }
command { service = "ChanServ"; name = "SET KEEPTOPIC"; command = "chanserv/set/keeptopic"; }
 
/*
 * cs_unban 
 *
 * 提供 chanserv/unban 命令.
 *
 * 用于解除频道用户禁令.
 */
module { name = "cs_unban" }
command { service = "ChanServ"; name = "UNBAN"; command = "chanserv/unban"; }
 
/*
 * cs_updown
 *
 * 提供 chanserv/up 和 chanserv/down 命令.
 *
 * 用于设置或移除自身在频道的状态模式.
 */
module { name = "cs_updown" }
command { service = "ChanServ"; name = "DOWN"; command = "chanserv/down"; group = "chanserv/status"; }
command { service = "ChanServ"; name = "UP"; command = "chanserv/up"; group = "chanserv/status"; }
 
/*
 * cs_xop 
 *
 * 提供 chanserv/xop 命令.
 * 提供 "XOP" 权限系统.
 *
 * 用于授予用户频道权限. 多个命令可关联至 chanserv/xop,
 * 各命令的权限级别由 privilege:xop 配置决定. 命令应按权限从高到低排序,
 * 每个命令继承下级命令的权限.
 *
 * chanserv/xop 的 "LIST" 子命令仅显示指定 XOP 类型的权限条目.
 * 无法一次性查看完整权限列表, 需使用其他权限系统实现.
 */
module { name = "cs_xop" }
command { service = "ChanServ"; name = "QOP"; command = "chanserv/xop"; group = "chanserv/access"; }
command { service = "ChanServ"; name = "SOP"; command = "chanserv/xop"; group = "chanserv/access"; }
command { service = "ChanServ"; name = "AOP"; command = "chanserv/xop"; group = "chanserv/access"; }
command { service = "ChanServ"; name = "HOP"; command = "chanserv/xop"; group = "chanserv/access"; }
command { service = "ChanServ"; name = "VOP"; command = "chanserv/xop"; group = "chanserv/access"; }
 
 
/*
 * 额外的 ChanServ 相关模块.
 */
 
/*
 * cs_statusupdate 
 *
 * 当频道权限列表变更时,
 * 此模块自动更新用户的频道状态.
 */
module { name = "cs_statusupdate" }