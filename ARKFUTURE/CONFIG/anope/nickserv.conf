/*
 * NickServ 的示例配置文件.
 */


service
{
	/*
	 * NickServ 客户端的名称.
	 * 如果更改此值, 你可能还需要修改 nickserv 模块配置中的 client 指令.
	 */
	nick = "NickServ"
 
	/*
	 * NickServ 客户端的用户名.
	 */
	user = "services"
 
	/*
	 * NickServ 客户端的主机名.
	 */
	host = "services.host" 
 
	/*
	 * NickServ 客户端的真实姓名.
	 */
	gecos = "Nickname Registration Service"
 
	/*
	 * 此客户端应使用的模式.
	 * 除非你明确知道操作后果, 否则不要修改此项.
	 *
	 * 这些模式高度依赖 IRCd. 如果注释掉, 将根据加载的协议模块使用合理的默认值.
	 *
	 * 注意: 错误设置此选项可能会破坏客户端的部分或全部功能. 若因此导致客户端功能异常, 我们将不提供支持.
	 */
	#modes = "+o"
 
	/*
	 * 此服务应加入的频道列表(可选, 用逗号分隔).
	 * 除日志频道外, 此设置作用有限, 因为服务仅会在指定频道闲置, 且不接受任何命令.
	 *
	 * 可使用模式字符或前缀符号为频道添加前缀.
	 */
	#channels = "@#services,#mychan"
}


/*
 * NickServ 核心模块.
 *
 * 提供 NickServ 的基础功能.
 */
module 
{
	name = "nickserv"
 
	/*
	 * 作为 NickServ 的客户端名称.
	 */
	client = "NickServ"
 
	/*
	 * 强制用户在注册昵称时提供电子邮件地址.
	 *
	 * 此指令默认为 "yes" 且建议启用. 若启用邮件注册则必须开启此项.
	 */
	forceemail = no
 
	/*
	 * 要求用户在更改邮箱时验证新邮箱的所有权.
	 */
	confirmemailchanges = no
 
	/*
	 * 用户使用未注册昵称连接时发送的消息. %n 会被替换为用户昵称.
	 *
	 * 此指令为可选.
	 */
	unregistered_notice = "Your nickname is not registered(您未注册). To register it, use: /msg NickServ REGISTER password email(若注册请使用命令: /msg NickServ REGISTER 您的密码 您的邮箱)"
 
	/*
	 * 新注册昵称的默认选项. 注意: 修改这些选项不影响已注册昵称. 列表必须以空格分隔.
	 *
	 * 可用选项:
	 * -   killprotect: 未在 60 秒内认证则强杀昵称
	 * -    kill_quick: 未在 20 秒内认证则强杀昵称(覆盖 killprotect, 需同时指定 killprotect)
	 * -    kill_immed: 未认证立即强杀昵称(覆盖 killprotect/kill_quick, 需同时指定 killprotect)
	 * -     ns_secure: 启用昵称安全保护(操作昵称前需验证密码)
	 * -    ns_private: 在 NickServ LIST 命令中隐藏昵称 
	 * -    hide_email: 在 NickServ INFO 命令中隐藏邮箱地址 
	 * -     hide_mask: 在 NickServ INFO 命令中隐藏上次/当前 user@host 
	 * -   hide_status: 在 NickServ INFO 命令中隐藏服务管理员状态
	 * -     hide_quit: 在 NickServ INFO 命令中隐藏上次退出消息 
	 * -   memo_signon: 用户登录昵称时通知新备忘录
	 * -  memo_receive: 收到新备忘录时立即通知
	 * -     memo_mail: 通过邮件通知新备忘录 
	 * -        autoop: 自动在用户加入且有权限的频道中授予 op 权限 
	 * -           msg: 以 PRIVMSG 代替 NOTICE 发送服务消息(需同时启用 options:useprivmsg)
	 * - ns_keep_modes: 启用跨会话保留用户模式 
	 * -  ns_no_expire: 启用永不过期(未确认的过期设置会覆盖此项)
	 *
	 * 此指令可选. 留空时默认为 ns_secure, memo_signon 和 memo_receive. 如需无默认值, 可单独设为 "none".
	 */
	defaults = "killprotect ns_secure ns_private hide_email hide_mask memo_signon memo_receive autoop"
 
	/*
	 * 连续使用 NickServ REGISTER 命令的最小间隔时间.
	 * 此指令可选但建议设置. 未设置时将禁用此限制.
	 */
	regdelay = 30s
 
	/*
	 * 昵称注册过期前的时长.
	 *
	 * 此指令可选但建议设置. 未设置时默认为 21 天.
	 */
	expire = 90d 
 
	/*
	 * 禁止服务管理员对其他服务管理员使用 ACCESS, CERT(不含 LIST 子命令), DROP, FORBID, SUSPEND, GETPASS 和 SET PASSWORD 命令.
	 *
	 * 此指令可选但建议启用.
	 */
	secureadmins = yes
 
	/*
	 * 若启用, 用户认证后服务将设置其有权限的频道模式(若尚未设置).
	 *
	 * 此指令可选.
	 */
	modeonid = yes 
 
	/*
	 * 若设置, 服务将在用户认证时设置这些用户模式.
	 *
	 * 此指令可选.
	 */
	#modesonid = "+R"
 
	/*
	 * 若启用, NickServ INFO 命令的 "last quit message" 字段将不显示网络分裂信息.
	 */
	hidenetsplitquit = no 
 
	/*
	 * 设置 killquick 和 kill 选项在强制用户退出受保护昵称前的等待时间.
	 */
	killquick = 20s 
	kill = 60s
 
	/*
	 * 若启用, 禁止注册包含现有服务管理员昵称的昵称. 例如: 若 Tester 是服务管理员, 则非 IRC 管理员无法注册 NewTester 或 Tester123.
	 *
	 * 注意: 启用后首次设置 Anope 时, 需以 IRC 管理员身份登录才能注册服务根昵称.
	 *
	 * 此指令可选.
	 */
	restrictopernicks = yes
 
	/*
	 * 服务需占用昵称时, 创建的伪用户所用的用户名(及可选的主机名).
	 */
	enforceruser = "enforcer"
	enforcerhost = "services.host" 
 
	/*
	 * 服务占用昵称的时长.
	 *
	 * 此指令可选但建议设置. 未设置时默认为 1 分钟.
	 */
	releasetimeout = 1m 
 
	/*
	 * 强制更改用户昵称以执行 "nick kill" 时, 新昵称将以此值为前缀, 后接 6 或 7 位数字.
	 * 需确保是有效昵称, 且 Nicklen+7 不超过 IRCd 允许的昵称长度.
	 *
	 * 此指令可选. 未设置时默认为 "Guest".
	 */
	guestnickprefix = "Guest"
 
	/*
	 * 若启用, 服务不允许拥有昵称所有权, 仅允许拥有账户所有权.
	 */
	nonicknameownership = no 
 
	/*
	 * 密码的最大长度.
	 *
	 * 此指令可选. 未设置时默认为 32.
	 */
	passlen = 32 
}


/*
 * NickServ 核心命令.
 *
 * 在 Anope 中, 模块可提供(多个)命令, 每个命令拥有唯一名称. 加载这些模块后, 可将命令配置到任意客户端并赋予任意名称.
 *
 * 此外, 可为命令指定权限名称, 执行该命令的用户必须在其 opertype 中包含该权限.
 *
 * 下文提供了合理的默认配置, 除非需要修改默认行为否则无需编辑.
 */
 
/* NickServ 命令组配置.
 *
 * 可将命令分组以使 NickServ 的 HELP 输出更易理解.
 * 删除以下组配置将恢复旧版行为(在 HELP 中简单列出所有命令).
 */
command_group 
{
	name = "nickserv/admin"
	description = _("Services Operator commands")
}
 
/* 添加帮助命令 */
command { service = "NickServ"; name = "HELP"; command = "generic/help"; }

/*
 * ns_access 
 *
 * 提供命令 nickserv/access.
 *
 * 用于配置允许访问账户的主机列表.
 */
module 
{
	name = "ns_access"
 
	/*
	 * 昵称访问列表允许的最大条目数.
	 * 未设置时默认 32. 不可设为 0.
	 */
	accessmax = 32 
 
	/*
	 * 若启用, 服务会将新注册用户的用户掩码自动添加至其账户访问列表.
	 * 未设置时, 除非用户手动添加地址到访问列表, 否则需先向 NickServ 认证才能被识别.
	 * 此指令可选.
	 */
	addaccessonreg = no 
}
command { service = "NickServ"; name = "ACCESS"; command = "nickserv/access"; }
 
/*
 * ns_ajoin 
 *
 * 提供命令 nickserv/ajoin.
 *
 * 用于配置认证后自动加入的频道.
 */
module 
{
	name = "ns_ajoin"
 
	/*
	 * 用户通过 NickServ AJOIN 命令可设置的频道数量上限.
	 */
	ajoinmax = 10 
}
command { service = "NickServ"; name = "AJOIN"; command = "nickserv/ajoin"; }
 
/*
 * ns_alist 
 *
 * 提供命令 nickserv/alist.
 *
 * 用于查看拥有访问权限的频道列表.
 */
module { name = "ns_alist" }
command { service = "NickServ"; name = "ALIST"; command = "nickserv/alist"; }
 
/*
 * ns_cert 
 *
 * 提供命令 nickserv/cert.
 *
 * 用于配置 SSL 证书列表(可用于自动认证).
 */
module 
{
	name = "ns_cert"
 
	/*
	 * 昵称证书指纹列表允许的最大条目数.
	 * 默认 5. 不可设为 0.
	 */
	max = 5 
}
command { service = "NickServ"; name = "CERT"; command = "nickserv/cert"; }
 
/*
 * ns_drop 
 *
 * 提供命令 nickserv/drop.
 *
 * 用于注销昵称.
 */
module { name = "ns_drop" }
command { service = "NickServ"; name = "DROP"; command = "nickserv/drop"; }
 
/*
 * ns_getemail 
 *
 * 提供命令 nickserv/getemail.
 *
 * 用于通过邮箱搜索注册账户.
 */
module { name = "ns_getemail" }
command { service = "NickServ"; name = "GETEMAIL"; command = "nickserv/getemail"; permission = "nickserv/getemail"; group = "nickserv/admin"; }
 
/*
 * ns_getpass 
 *
 * 提供命令 nickserv/getpass.
 *
 * 用于获取用户密码(需未启用加密).
 */
#module { name = "ns_getpass" }
#command { service = "NickServ"; name = "GETPASS"; command = "nickserv/getpass"; permission = "nickserv/getpass"; }
 
/*
 * ns_group 
 *
 * 提供命令 nickserv/group, nickserv/glist 和 nickserv/ungroup.
 *
 * 用于控制昵称组.
 */
module 
{
	name = "ns_group"
 
	/*
	 * 组内允许的昵称数量上限.
	 *
	 * 此指令可选但建议设置. 未设置或设为 0 时不限制.
	 */
	maxaliases = 16 
 
	/*
	 * 若启用, NickServ GROUP 命令将禁止任何组变更. 建议启用以防止用户意外删除昵称, 强制用户必须先显式删除昵称才能加入其他组.
	 *
	 * 此指令可选但建议启用.
	 */
	nogroupchange = yes 
}
command { service = "NickServ"; name = "GLIST"; command = "nickserv/glist"; }
command { service = "NickServ"; name = "GROUP"; command = "nickserv/group"; }
command { service = "NickServ"; name = "UNGROUP"; command = "nickserv/ungroup"; }
 
/*
 * ns_identify 
 *
 * 提供命令 nickserv/identify.
 *
 * 用于账户认证.
 */
module 
{
	name = "ns_identify"
 
	/*
	 * 设置同一账户允许的最大并发登录数.
	 */
	maxlogins = 10 
}
command { service = "NickServ"; name = "ID"; command = "nickserv/identify"; hide = true; }
command { service = "NickServ"; name = "IDENTIFY"; command = "nickserv/identify"; }
 
/*
 * ns_info 
 *
 * 提供命令:
 * nickserv/info - 用于获取账户信息 
 * nickserv/set/hide, nickserv/saset/hide - 用于配置 nickserv/info 公开显示的选项 
 */
module { name = "ns_info" }
command { service = "NickServ"; name = "INFO"; command = "nickserv/info"; }
 
command { service = "NickServ"; name = "SET HIDE"; command = "nickserv/set/hide"; }
command { service = "NickServ"; name = "SASET HIDE"; command = "nickserv/saset/hide"; permission = "nickserv/saset/hide"; }

/*
 * ns_list 
 *
 * 提供命令:
 *   nickserv/list - 用于检索和搜索注册账户列表 
 *   nickserv/set/private, nickserv/saset/private - 用于配置用户账户是否在 nickserv/list 中显示
 */
module 
{
	name = "ns_list"
 
	/*
	 * NickServ LIST 命令最多返回的昵称数量
	 */
	listmax = 50
}
command { service = "NickServ"; name = "LIST"; command = "nickserv/list"; }
 
command { service = "NickServ"; name = "SET PRIVATE"; command = "nickserv/set/private"; }
command { service = "NickServ"; name = "SASET PRIVATE"; command = "nickserv/saset/private"; permission = "nickserv/saset/private"; }
 
/*
 * ns_logout
 *
 * 提供命令 nickserv/logout 
 *
 * 用于登出账户 
 */
module { name = "ns_logout" }
command { service = "NickServ"; name = "LOGOUT"; command = "nickserv/logout"; }
 
/*
 * ns_recover 
 *
 * 提供命令 nickserv/recover
 *
 * 用于从服务或其他用户处回收昵称 
 */
module
{
	name = "ns_recover"
 
	/*
	 * 若启用, 当用户使用 recover 命令时, 服务会将已认证用户通过 svsnick/svsjoin 操作转移到被回收用户的昵称和频道 
	 *
	 * 此指令可选
	 */
	restoreonrecover = yes 
}
command { service = "NickServ"; name = "RECOVER"; command = "nickserv/recover"; }
# 取消下方注释可模拟 1.8 版本的 ghost 和 release 行为 
#command { service = "NickServ"; name = "GHOST"; command = "nickserv/recover"; }
#command { service = "NickServ"; name = "RELEASE"; command = "nickserv/recover"; }
 
/*
 * ns_register 
 *
 * 提供命令 nickserv/confirm, nickserv/register 和 nickserv/resend 
 *
 * 用于注册账户
 */
module 
{
	name = "ns_register"
 
	/*
	 * 注册确认设置: "none"=无需确认, "mail"=邮件确认, "admin"=需管理员手动确认 
	 * "disable"=完全禁用所有注册 
	 */
	registration = "none"
 
	/*
	 * NickServ RESEND 命令连续使用的最小间隔时间 
	 *
	 * 此指令可选但建议设置. 未设置则无限制
	 */
	resenddelay = 90s
 
	/*
	 * 用户连接时间不足指定秒数时禁止注册昵称
	 *
	 * 此指令可选 
	 */
	#nickregdelay = 30s 
 
	/*
	 * 未确认账户在被释放前保留的时间长度
	 */
	#unconfirmedexpire = 1d 
}
command { service = "NickServ"; name = "CONFIRM"; command = "nickserv/confirm"; }
command { service = "NickServ"; name = "REGISTER"; command = "nickserv/register"; }
command { service = "NickServ"; name = "RESEND"; command = "nickserv/resend"; }
 
/*
 * ns_resetpass
 *
 * 提供命令 nickserv/resetpass
 *
 * 通过邮件发送临时密码来重置密码 
 */
module { name = "ns_resetpass" }
command { service = "NickServ"; name = "RESETPASS"; command = "nickserv/resetpass"; }
 
/*
 * ns_set 
 *
 * 提供命令:
 *   nickserv/set, nickserv/saset - SET/SASET 命令的虚拟帮助包装器 
 *   nickserv/set/autoop, nickserv/saset/autoop - 配置用户加入频道时是否自动设置模式
 *   nickserv/set/display, nickserv/saset/display - 设置用户显示名称
 *   nickserv/set/email, nickserv/saset/email - 设置用户邮箱地址
 *   nickserv/set/keepmodes, nickserv/saset/keepmodes - 配置服务是否保留用户跨会话的模式
 *   nickserv/set/kill, nickserv/saset/kill - 配置昵称保护
 *   nickserv/set/language, nickserv/saset/language - 配置服务使用语言
 *   nickserv/set/message, nickserv/saset/message - 配置服务消息发送方式 
 *   nickserv/set/password, nickserv/saset/password - 更改用户密码 
 *   nickserv/set/secure, nickserv/saset/secure - 配置是否允许通过 nickserv/access 自动认证 
 *   nickserv/saset/noexpire - 配置昵称永不过期 
 */
module
{
	name = "ns_set"
 
	/*
	 * 是否允许在 NickServ SET KILL 命令中使用 IMMED 选项
	 *
	 * 此指令可选 
	 */
	#allowkillimmed = yes
}
 
command { service = "NickServ"; name = "SET"; command = "nickserv/set"; }
command { service = "NickServ"; name = "SASET"; command = "nickserv/saset"; permission = "nickserv/saset/"; group = "nickserv/admin"; }
 
command { service = "NickServ"; name = "SET AUTOOP"; command = "nickserv/set/autoop"; }
command { service = "NickServ"; name = "SASET AUTOOP"; command = "nickserv/saset/autoop"; permission = "nickserv/saset/autoop"; }
 
command { service = "NickServ"; name = "SET DISPLAY"; command = "nickserv/set/display"; }
command { service = "NickServ"; name = "SASET DISPLAY"; command = "nickserv/saset/display"; permission = "nickserv/saset/display"; }
 
command { service = "NickServ"; name = "SET EMAIL"; command = "nickserv/set/email"; }
command { service = "NickServ"; name = "SASET EMAIL"; command = "nickserv/saset/email"; permission = "nickserv/saset/email"; }
 
command { service = "NickServ"; name = "SET KEEPMODES"; command = "nickserv/set/keepmodes"; }
command { service = "NickServ"; name = "SASET KEEPMODES"; command = "nickserv/saset/keepmodes"; permission = "nickserv/saset/keepmodes"; }
 
command { service = "NickServ"; name = "SET KILL"; command = "nickserv/set/kill"; }
command { service = "NickServ"; name = "SASET KILL"; command = "nickserv/saset/kill"; permission = "nickserv/saset/kill"; }
 
command { service = "NickServ"; name = "SET LANGUAGE"; command = "nickserv/set/language"; }
command { service = "NickServ"; name = "SASET LANGUAGE"; command = "nickserv/saset/language"; permission = "nickserv/saset/language"; }
 
command { service = "NickServ"; name = "SET MESSAGE"; command = "nickserv/set/message"; }
command { service = "NickServ"; name = "SASET MESSAGE"; command = "nickserv/saset/message"; permission = "nickserv/saset/message"; }
 
command { service = "NickServ"; name = "SET PASSWORD"; command = "nickserv/set/password"; }
command { service = "NickServ"; name = "SASET PASSWORD"; command = "nickserv/saset/password"; permission = "nickserv/saset/password"; }
 
command { service = "NickServ"; name = "SET SECURE"; command = "nickserv/set/secure"; }
command { service = "NickServ"; name = "SASET SECURE"; command = "nickserv/saset/secure"; permission = "nickserv/saset/secure"; }
 
command { service = "NickServ"; name = "SASET NOEXPIRE"; command = "nickserv/saset/noexpire"; permission = "nickserv/saset/noexpire"; }

 
/*
 * ns_set_misc
 *
 * 提供命令 nickserv/set/misc 
 *
 * 允许创建自定义命令设置数据, 并显示在 nickserv/info 中
 * 可通过 misc_description 字段设置帮助信息 
 */
module { name = "ns_set_misc" }
command { service = "NickServ"; name = "SET URL"; command = "nickserv/set/misc"; misc_description = _("为账户关联 URL"); }
command { service = "NickServ"; name = "SASET URL"; command = "nickserv/saset/misc"; misc_description = _("为此账户关联 URL"); permission = "nickserv/saset/url"; group = "nickserv/admin"; }
#command { service = "NickServ"; name = "SET DISCORD"; command = "nickserv/set/misc"; misc_description = _("为账户关联 Discord 账号"); }
#command { service = "NickServ"; name = "SASET DISCORD"; command = "nickserv/saset/misc"; misc_description = _("为此账户关联 Discord 账号"); permission = "nickserv/saset/discord"; group = "nickserv/admin"; }
#command { service = "NickServ"; name = "SET TWITTER"; command = "nickserv/set/misc"; misc_description = _("为账户关联 Twitter 账号"); }
#command { service = "NickServ"; name = "SASET TWITTER"; command = "nickserv/saset/misc"; misc_description = _("为此账户关联 Twitter 账号"); permission = "nickserv/saset/twitter"; group = "nickserv/admin"; }
#command { service = "NickServ"; name = "SET FACEBOOK"; command = "nickserv/set/misc"; misc_description = _("为账户关联 Facebook URL"); }
#command { service = "NickServ"; name = "SASET FACEBOOK"; command = "nickserv/saset/misc"; misc_description = _("为此账户关联 Facebook URL"); permission = "nickserv/saset/facebook"; group = "nickserv/admin"; }
 
/*
 * ns_status
 *
 * 提供命令 nickserv/status 
 *
 * 用于检测用户是否被服务识别或认证
 */
module { name = "ns_status" }
command { service = "NickServ"; name = "STATUS"; command = "nickserv/status"; }
 
/*
 * ns_suspend 
 *
 * 提供命令 nickserv/suspend 和 nickserv/unsuspend
 *
 * 用于冻结/解冻昵称. 冻结的昵称不可用但配置保留
 */
module 
{
	name = "ns_suspend"
 
	/*
	 * 冻结昵称自动解冻的时间长度
	 *
	 * 此指令可选. 未设置则默认永不过期
	 */
	#suspendexpire = 90d 
 
	/*
	 * 在 NickServ INFO 输出中向非管理员显示的信息项 
	 * 注释此项将完全不向非管理员显示冻结昵称信息 
	 */
	show = "suspended, by, reason, on, expires"
}
command { service = "NickServ"; name = "SUSPEND"; command = "nickserv/suspend"; permission = "nickserv/suspend"; group = "nickserv/admin"; }
command { service = "NickServ"; name = "UNSUSPEND"; command = "nickserv/unsuspend"; permission = "nickserv/suspend"; group = "nickserv/admin"; }
 
/*
 * ns_update
 *
 * 提供命令 nickserv/update 
 *
 * 用于更新所有频道状态, 启用虚拟主机等
 */
module { name = "ns_update" }
command { service = "NickServ"; name = "UPDATE"; command = "nickserv/update"; }
 
/*
 * 额外 NickServ 相关模块 
 */
 
/*
 * ns_maxemail
 *
 * 限制同一邮箱在 Anope 中注册账户的次数 
 */
#module 
{
	name = "ns_maxemail"
 
	/*
	 * 同一邮箱允许注册的昵称数量上限. 设为 0 或注释表示无限制
	 */
	maxemails = 1 
}