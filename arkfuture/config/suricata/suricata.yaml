%YAML 1.1
---

# 快速定位标签: [修改网卡名] 
# Suricata配置文件. 除了本文件内对所有选项的注释外, 完整文档可见:
# https://docs.suricata.io/en/latest/configuration/suricata-yaml.html

# 本配置文件适用于Suricata的7版本且用于Debian系统
suricata-version: "7.0"

##
## Step 1: 配置你的网络
##

vars:
  # 越具体对告警准确性和性能越好
  address-groups:
    HOME_NET: "[192.168.0.0/16,10.0.0.0/8,172.16.0.0/12]"
    #HOME_NET: "[192.168.0.0/16]"
    #HOME_NET: "[10.0.0.0/8]"
    #HOME_NET: "[172.16.0.0/12]"
    #HOME_NET: "any"

    EXTERNAL_NET: "!$HOME_NET"
    #EXTERNAL_NET: "any"

    HTTP_SERVERS: "$HOME_NET"
    SMTP_SERVERS: "$HOME_NET"
    SQL_SERVERS: "$HOME_NET"
    DNS_SERVERS: "$HOME_NET"
    TELNET_SERVERS: "$HOME_NET"
    AIM_SERVERS: "$EXTERNAL_NET"
    DC_SERVERS: "$HOME_NET"
    DNP3_SERVER: "$HOME_NET"
    DNP3_CLIENT: "$HOME_NET"
    MODBUS_CLIENT: "$HOME_NET"
    MODBUS_SERVER: "$HOME_NET"
    ENIP_CLIENT: "$HOME_NET"
    ENIP_SERVER: "$HOME_NET"

  port-groups:
    HTTP_PORTS: "80"
    SHELLCODE_PORTS: "!80"
    ORACLE_PORTS: 1521
    SSH_PORTS: 22
    DNP3_PORTS: 20000
    MODBUS_PORTS: 502
    FILE_DATA_PORTS: "[$HTTP_PORTS,110,143]"
    FTP_PORTS: 21
    GENEVE_PORTS: 6081
    VXLAN_PORTS: 4789
    TEREDO_PORTS: 3544

##
## Step 2: 选择要启用的日志输出
##

# 默认日志目录. 任何日志或输出文件若未用完整路径指定, 将被放置于此. 可通过-l命令行参数覆盖.
default-log-dir: /var/log/suricata/

# 全局统计配置
stats:
  enabled: yes
  # interval字段(秒)控制更新日志中统计信息的间隔.
  interval: 8
  # 将解码事件加入统计.
  #decoder-events: true
  # 解码事件在统计中的前缀. 之前为'decoder', 但会导致eve.stats记录中缺少事件. 参见issue #2225.
  #decoder-events-prefix: "decoder.event"
  # 将流事件加入统计.
  #stream-events: false

# 插件 -- 实验性 -- 为每个插件共享对象指定文件名
plugins:
#   - /path/to/plugin.so

# 配置你想要的告警(及其它)日志类型.
outputs:
  # 基于行的告警日志, 类似Snort的fast.log
  - fast:
      enabled: yes
      filename: fast.log
      append: yes
      #filetype: regular # 'regular', 'unix_stream' 或 'unix_dgram'

  # 可扩展事件格式(简称EVE) JSON事件日志
  - eve-log:
      enabled: yes
      filetype: regular #regular|syslog|unix_dgram|unix_stream|redis
      filename: eve.json
      # 启用多线程eve.json输出; 输出文件会附加标识符, 例如eve.9.json
      #threaded: false
      #prefix: "@cee: " # 前置到每条日志条目的前缀
      # 以下仅在type为syslog时有效
      #identity: "suricata"
      #facility: local5
      #level: Info ## 可选级别: Emergency, Alert, Critical,
                   ## Error, Warning, Notice, Info, Debug
      #ethernet: no  # 若可用, 在事件中记录以太网头
      #redis:
      #  server: 127.0.0.1
      #  port: 6379
      #  async: true ## 若异步读取redis回复
      #  mode: list ## 可选值: list|lpush(默认), rpush, channel|publish
      #             ## lpush与rpush使用Redis列表. "list"为lpush的别名
      #             ## publish使用Redis频道. "channel"为publish的别名
      #  key: suricata ## 使用key或频道(默认为suricata)
      # Redis管道设置. 启用后每隔'batch-size'条事件才查询一次. 可降低网络延迟, 但占用更多内存. 无刷新机制, 仅建议高流量部署使用.
      #  pipelining:
      #    enabled: yes ## 设为yes启用查询管道
      #    batch-size: 10 ## 缓冲区保持的条目数

      # 包含顶层元数据. 默认为是.
      #metadata: no

      # 在pcap文件处理模式下, 包含输入pcap文件名
      pcap-file: false

      # Community Flow ID
      # 为EVE记录添加'community_id'字段. 用于与其它工具(如Zeek)的记录匹配.
      #
      # 需要'seed'值, 在传感器与工具间保持一致, 以降低可预测性.

      # 启用/禁用community id特性.
      community-id: false
      # ID输出的种子值. 有效范围0-65535.
      community-id-seed: 0

      # HTTP X-Forwarded-For支持, 通过额外字段或覆盖源/目的IP(取决于流方向)
      # 使用X-Forwarded-For头中的IP. 有助于审查被反向或正向代理的流量告警.
      xff:
        enabled: no
        # 两种操作模式: "extra-data" 和 "overwrite".
        mode: extra-data
        # 两种代理部署: "reverse" 与 "forward". 反向部署使用最后一个IP, 正向部署使用第一个IP.
        deployment: reverse
        # 报告实际IP的头名称. 若存在多个IP, 取最后一个.
        header: X-Forwarded-For

      types:
        - alert:
            # payload: yes             # 以Base64形式导出载荷
            # payload-buffer-size: 4kb # eve-log中载荷缓冲区的最大尺寸
            # payload-printable: yes   # 以可打印(有损)格式导出载荷
            # packet: yes              # 导出数据包(不含流段)
            # metadata: no             # 为告警附加应用层元数据. 默认为是
            # http-body: yes           # 需要metadata; 以Base64导出HTTP体
            # http-body-printable: yes # 需要metadata; 以可打印格式导出HTTP体

            # 为使用"tag"关键字的规则启用标记数据包日志.
            tagged-packets: yes
            # 记录引擎对数据包的最终动作
            # (例如: 告警动作可能为'allowed', 但因其它告警最终判决为'drop')
            # verdict: yes
        # 应用层帧
        - frame:
            # 默认禁用, 因日志量巨大.
            enabled: no
            # payload-buffer-size: 4kb # eve-log中帧载荷缓冲区最大尺寸
        - anomaly:
            # 异常日志记录意外状况, 如截断数据包, 无效IP/UDP/TCP长度等,
            # 以及导致数据包无法继续处理或流行为异常的事件.
            # 高异常发生率网络可能出现包处理性能下降.
            #
            # 异常报告类型:
            # 1. 解码: 解码单个数据包时检测到的值与状况. 包括低级协议长度错误或流相关事件(TCP三次握手问题, 异常序列号等).
            # 2. 流: 流相关事件(TCP三次握手问题, 异常序列号等).
            # 3. 应用层: 应用层特定异常状况, 或与应用监控状态不符的事件.
            #
            # 默认启用异常日志. 启用后同时开启应用层异常报告.
            enabled: yes
            #
            # 选择异常日志类型, 并可选择是否为包异常记录包头.
            types:
              # decode: no
              # stream: no
              # applayer: yes
            #packethdr: no
        - http:
            extended: yes     # 启用扩展日志信息
            # custom允许在eve-log中添加额外的HTTP字段
            # 如下示例取消注释后可增加三个字段
            #custom: [Accept-Encoding, Accept-Language, Authorization]
            # 设置为{both, request, response}之一, 以导出每次HTTP请求/响应的所有头
            # dump-all-headers: none
        - dns:
            # 此配置使用新DNS日志格式, 旧配置仍可用:
            # https://docs.suricata.io/en/latest/output/eve/eve-json-output.html#dns-v1-format

            # 自Suricata 5.0起, eve dns输出格式版本2为默认.
            #version: 2

            # 启用/禁用此记录器. 默认启用.
            #enabled: yes

            # 控制请求与响应日志:
            # - requests: 记录DNS查询
            # - responses: 记录DNS应答
            # 默认两者均记录.
            #requests: no
            #responses: no

            # 应答日志格式:
            # - detailed: 每条应答一个数组项
            # - grouped: 按类型聚合应答
            # 默认: all
            #formats: [detailed, grouped]

            # 按查询类型记录的DNS记录类型.
            # 默认: all.
            #types: [a, aaaa, cname, mx, ns, ptr, txt]
        - tls:
            extended: yes     # 启用扩展日志信息
            # 记录会话通过会话ID恢复时的TLS事务
            #session-resumption: no
            # ja4哈希默认不记录, 需设为on才记录
            # ja4: off
            # custom控制eve-log中包含的TLS字段
            #custom: [subject, issuer, session_resumed, serial, fingerprint, sni, version, not_before, not_after, certificate, chain, ja3, ja3s, ja4]
        - files:
            force-magic: no   # 对所有已记录文件强制记录magic
            # 强制记录校验和, 可用hash函数: md5, sha1, sha256
            #force-hash: [md5]
        #- drop:
        #    alerts: yes      # 记录导致丢包的告警
        #    flows: all       # start或all: 'start'仅记录每个流方向的第一个丢包. 'all'记录每个丢包.
            # 记录引擎对数据包的最终动作
            # (可显示因reject导致丢包时的更多信息)
            # verdict: yes
        - smtp:
            #extended: yes # 启用扩展日志信息
            # 包括: bcc, message-id, subject, x_mailer, user-agent
            # 自定义字段列表:
            #  reply-to, bcc, message-id, subject, x-mailer, user-agent, received,
            #  x-originating-ip, in-reply-to, references, importance, priority,
            #  sensitivity, organization, content-md5, date
            #custom: [received, x-mailer, x-originating-ip, relays, reply-to, bcc]
            # 输出字段的md5: body, subject
            # body需设置app-layer.protocols.smtp.mime.body-md5为yes
            #md5: [body, subject]

        #- dnp3
        - ftp
        - rdp
        - nfs
        - smb
        - tftp
        - ike
        - dcerpc
        - krb5
        - bittorrent-dht
        - snmp
        - rfb
        - sip
        - quic:
            # ja4哈希默认不记录, 需设为on才记录
            # ja4: off
        - dhcp:
            enabled: yes
            # 启用扩展模式时记录所有DHCP消息详细信息. 关闭时(默认)仅记录映射MAC到IP的必要信息.
            extended: no
        - ssh
        - mqtt:
            # passwords: yes           # 以明文输出密码
        - http2
        - pgsql:
            enabled: no
            # passwords: yes           # 以明文输出密码. 默认禁用
        - stats:
            totals: yes       # 合并所有线程的统计信息
            threads: no       # 每线程统计
            deltas: no        # 包含增量值
        # 双向流
        - flow
        # 单向流
        #- netflow

        # 元数据事件类型. 当保存pktvar时触发, 包含pktvars, flowvars, flowbits及flowints.
        #- metadata

        # 实验性逐包输出, 提供TCP状态跟踪详情, 包括内部状态, 标志等.
        # 实验性, 仅调试, 配置与输出可能随时变更.
        #- stream:
        #   all: false                      # 记录所有TCP包
        #   event-set: false                # 记录含解码器/流事件的包
        #   state-update: false             # 记录触发TCP状态更新的包
        #   spurious-retransmission: false  # 记录虚假重传包

  # 基于行的HTTP请求日志(无告警)
  - http-log:
      enabled: no
      filename: http.log
      append: yes
      #extended: yes     # 启用扩展日志信息
      #custom: yes       # 启用自定义日志格式(由customformat定义)
      #customformat: "%{%D-%H:%M:%S}t.%z %{X-Forwarded-For}i %H %m %h %u %s %B %a:%p -> %A:%P"
      #filetype: regular # 'regular', 'unix_stream' 或 'unix_dgram'

  # 基于行的TLS握手参数日志(无告警)
  - tls-log:
      enabled: no  # 记录TLS连接.
      filename: tls.log # TLS日志存储文件.
      append: yes
      #extended: yes     # 记录扩展信息如指纹
      #custom: yes       # 启用自定义日志格式(由customformat定义)
      #customformat: "%{%D-%H:%M:%S}t.%z %a:%p -> %A:%P %v %n %d %D"
      #filetype: regular # 'regular', 'unix_stream' 或 'unix_dgram'
      # 记录通过会话ID恢复的TLS事务
      #session-resumption: no

  # 将证书链保存到磁盘的输出模块
  - tls-store:
      enabled: no
      #certs-log-dir: certs # 证书文件存储目录

  # 数据包日志... 以pcap格式记录数据包. 三种模式: "normal", "multi" 及 "sguil".
  #
  # normal模式: 在default-log-dir或指定dir创建"filename" pcap文件.
  # multi模式: 每线程创建文件. 性能更好, 但产生多个文件.
  # multi模式下文件名支持特殊变量:
  # - %n -- 线程号
  # - %i -- 线程ID
  # - %t -- 时间戳(秒或秒.微秒, 取决于'ts-format')
  # 例: filename: pcap.%n.%t
  #
  # 可使用目录, 但目录不会由Suricata创建. 如 filename: pcaps/%n/log.%s 将写入每线程子目录.
  #
  # limit与max-files设置为每线程生效. 8线程 1000MB 2000文件时上限约16TiB.
  #
  # Sguil模式下 "dir" 为基准目录. 该目录下按Sguil期望结构创建pcap:
  #
  # $sguil-base-dir/YYYY-MM-DD/$filename.<timestamp>
  #
  # 默认记录所有数据包, 除:
  # - 超出stream.reassembly.depth的TCP流
  # - 密钥交换后的加密流
  #
  - pcap-log:
      enabled: no
      filename: log.pcap

      # 文件大小限制. 可指定kb, mb, gb. 纯数字解析为字节.
      limit: 1000mb

      # 设置后启用环形缓冲模式. 最多保留"max-files"个大小为"limit"的文件
      max-files: 2000

      # pcap文件压缩算法. 可选: none, lz4.
      # 启用压缩与sguil模式不兼容. Windows上启用压缩会增加磁盘I/O.
      compression: none

      # lz4压缩附加选项. 压缩级别0-16, 越高压缩率越高.
      #lz4-checksum: no
      #lz4-level: 0

      mode: normal # normal, multi 或 sguil.

      # pcap文件存放目录. 未提供时使用默认日志目录. sguil模式必需.
      #dir: /nsm_data/

      #ts-format: usec # sec或usec. 默认为filename.sec, usec为filename.sec.usec
      use-stream-depth: no # 设为"yes"则达到流检查深度后忽略后续包. "no"记录所有包
      honor-pass-rules: no # 设为"yes"则匹配pass规则的流停止记录.
      # 设为"all"记录所有包, "alerts"仅记录告警包及流, "tag"仅记录被"tag"关键字标记的流
      #conditional: all

  # 包含大量信息的完整告警日志, 供规则编写者或调查误报.
  - alert-debug:
      enabled: no
      filename: alert-debug.log
      append: yes
      #filetype: regular # 'regular', 'unix_stream' 或 'unix_dgram'

  # Stats.log包含Suricata引擎各计数器数据.
  - stats:
      enabled: yes
      filename: stats.log
      append: yes       # 追加到文件(yes)或覆盖(no)
      totals: yes       # 合并所有线程统计
      threads: no       # 每线程统计
      #null-values: yes  # 打印值为0的计数器. 默认: no

  # 类似fast.log的基于行告警日志, 输出到syslog
  - syslog:
      enabled: no
      # 发送到syslog的身份. 省略则使用程序名(通常为suricata).
      #identity: "suricata"
      facility: local5
      #level: Info ## 可选级别: Emergency, Alert, Critical,
                   ## Error, Warning, Notice, Info, Debug

  # 将文件存储到磁盘的输出模块. 文件按SHA256前2字符分目录.
  # 每个文件以SHA256命名.
  #
  # 发现重复文件时, 更新现有文件的时间戳.
  #
  # 与旧filestore不同, 默认不写入元数据, 因eve-log中已有"fileinfo"记录.
  # 若write-fileinfo设为yes, 每个文件会额外生成.json文件保存fileinfo记录,
  # 并使用后缀保证唯一性.
  #
  # 清理filestore目录请使用 "suricatactl filestore prune" 命令.
  - file-store:
      version: 2
      enabled: no

      # 设置filestore目录. 相对路径位于"default-log-dir"内.
      #dir: filestore

      # 为每次文件出现写出fileinfo记录. 默认禁用, 因主eve-log已记录.
      #write-fileinfo: yes

      # 强制存储所有文件. 默认: no.
      #force-filestore: yes

      # 覆盖会话文件提取的全局stream-depth. 设为0无限制; 否则需大于全局值.
      #stream-depth: 0

      # 取消注释定义Suricata为filestore保持打开的最大文件数. 默认0表示每次写入后关闭.
      #max-open-files: 1000

      # 强制记录校验和: 可选hash函数md5, sha1, sha256. 本模块已用SHA256命名文件.
      #force-hash: [sha1, md5]
      # 注意: 若write-fileinfo禁用则忽略X-Forwarded配置
      # HTTP X-Forwarded-For支持, 通过额外字段或覆盖源/目的IP
      # 使用X-Forwarded-For头中的IP. 有助于审查被代理流量.
      xff:
        enabled: no
        # 两种模式: "extra-data" 和 "overwrite".
        mode: extra-data
        # 两种部署: "reverse" 和 "forward". 反向用最后IP, 正向用第一IP.
        deployment: reverse
        # 报告IP的头名称. 多IP时取最后一个.
        header: X-Forwarded-For

  # 流标准化后记录TCP数据
  # 两种类型: file或dir:
  #     - file写入单个日志文件.
  #     - dir为每个TCP会话创建2个文件保存原始TCP数据.
  # 用'both'同时启用file与dir.
  #
  # 注意: 受"stream.reassembly.depth"限制
  - tcp-data:
      enabled: no
      type: file
      filename: tcp-data.log

  # 标准化, 去chunk与解压后记录HTTP体数据.
  # 两种类型: file或dir.
  #     - file写入单个日志文件.
  #     - dir为每个HTTP会话创建2个文件保存标准化数据.
  # 用'both'同时启用.
  #
  # 注意: 受体大小限制
  - http-body-data:
      enabled: no
      type: file
      filename: http-data.log

  # Lua输出支持 - 执行lua脚本生成告警与事件输出.
  # 文档:
  # https://docs.suricata.io/en/latest/output/lua-output.html
  - lua:
      enabled: no
      #scripts-dir: /etc/suricata/lua-output/
      scripts:
      #   - script1.lua

# 日志配置. 此处不涉及IDS告警/事件, 而是Suricata自身行为输出, 如启动消息, 错误等.
logging:
  # 默认日志级别: 可在输出段覆盖.
  # 注意: 仅当Suricata编译时启用--enable-debug才输出debug级别.
  #
  # 可被环境变量SC_LOG_LEVEL覆盖.
  default-log-level: notice

  # 默认输出格式. 可选参数, 若未提供则使用合理默认值. 可在输出段覆盖.
  # 可省略以使用默认.
  #
  # 可被环境变量SC_LOG_FORMAT覆盖.
  #default-log-format: "%D: %S: %M"
  #
  # 兼容7.0前格式:
  #default-log-format: "[%i] %t [%S] - (%f:%l) <%d> (%n) -- "

  # 过滤输出的正则. 可在输出段覆盖. 默认为空(不过滤).
  #
  # 可被环境变量SC_LOG_OP_FILTER覆盖.
  default-output-filter:

  # 需要配置并构建时提供libunwind.
  # 若信号异常终止Suricata, 启用后显示含栈轨迹的诊断消息.
  #stacktrace-on-signal: on

  # 定义日志输出. 若未定义或全部禁用, 则默认输出到控制台.
  outputs:
  - console:
      enabled: yes
      # type: json
  - file:
      enabled: yes
      level: info
      filename: suricata.log
      # format: "[%i - %m] %z %d: %S: %M"
      # type: json
  - syslog:
      enabled: no
      facility: local5
      format: "[%i] <%d> -- "
      # type: json


##
## Step 3: 配置常用捕获设置
##
## 更多高级捕获选项(包括Netmap与PF_RING)见下方"Advanced Capture Options"
##

# Linux高速捕获支持 [修改网卡名]
af-packet:
  - interface: eth0
    # 接收线程数. "auto"使用核心数
    #threads: auto
    # 默认clusterid. AF_PACKET基于流负载均衡数据包
    cluster-id: 99
    # 默认AF_PACKET集群类型. AF_PACKET可按流或按hash负载均衡
    # 仅Linux内核>3.1支持
    # 可选值:
    #  * cluster_flow: 同一流的所有包发往同一socket
    #  * cluster_cpu: 内核中同一CPU处理的所有包发往同一socket
    #  * cluster_qm: 网卡RSS队列关联的所有包发往同一socket. 需Linux>=3.14
    #  * cluster_ebpf: eBPF文件负载均衡. 更多信息见doc/userguide/capture-hardware/ebpf-xdp.rst
    # 推荐: 多数设备用cluster_flow, 使用RSS的采集卡系统用cluster_cpu或cluster_qm
    #  (需CPU亲和与IRQ调优)
    # cluster_rollover已废弃; 若使用将替换为cluster_flow
    cluster-type: cluster_flow
    # 某些分片场景下hash无法计算. 若"defrag"设为yes, 内核将在发包前完成所需去分片
    defrag: yes
    # 使用AF_PACKET ring特性, 将'use-mmap'设为yes
    #use-mmap: yes
    # 锁定内存映射避免被换出. 注意超额订阅可能锁住系统
    #mmap-locked: yes
    # 使用tpacket_v3捕获模式, 仅在use-mmap为true时生效
    # 不要在IPS或TAP模式使用, 因会导致严重延迟
    #tpacket-v3: yes
    # ring尺寸将根据max-pending-packets与线程数自动计算. 可手动设置包数
    # 若使用cluster_flow且单流流量极大, 可独立设置ring-size:
    #ring-size: 2048
    # block-size仅用于tpacket_v3. 需足够大以容纳多个包. 单位为字节, 需考虑MTU
    # 应为2的幂且为页大小倍数(通常4096)
    #block-size: 32768
    # tpacket_v3块超时: 开放块在block-timeout毫秒未填满时传递至用户空间
    #block-timeout: 10
    # tpacket-v2块大小. 7.0.9起内置默认值由32768增至131072. 若需可改回32768
    #v2-block-size: 131072
    # 繁忙系统设为yes可在丢包阶段帮助恢复, 但可能导致部分包(至多一个ring刷新)未被检查
    #use-emergency-flush: yes
    # 接收缓冲区大小, 增大可能提升性能
    #buffer-size: 32768
    # 设为yes禁用混杂模式
    #disable-promisc: no
    # 接口校验和验证模式. 捕获时部分包因校验和计算已卸载到网卡而无效
    # 可选值:
    #  - kernel: 使用内核每包指示(默认)
    #  - yes: 强制校验和验证
    #  - no: 禁用校验和验证
    #  - auto: Suricata用统计方法检测是否启用校验和卸载
    # 警告: 需将capture.checksum-validation设为yes才生效
    #checksum-checks: kernel
    # 适用BPF过滤器. pcap过滤语法
    #bpf-filter: port 80 or udp
    # 以下变量启用AF_PACKET tap或IPS模式
    # 若copy-mode设为ips或tap, 当前接口流量将复制到copy-iface接口. 设为tap则完整复制, 设为ips则匹配drop动作的包不复制
    #copy-mode: ips
    #copy-iface: eth1
    #  eBPF与XDP设置(含旁路/过滤/负载均衡)详见doc/userguide/capture-hardware/ebpf-xdp.rst

  # 此处放默认值. 以上列表未包含的接口将使用这些值
  - interface: default
    #threads: auto
    #use-mmap: no
    #tpacket-v3: yes

# Linux高速af-xdp捕获支持
af-xdp:
  - interface: default
    # 接收线程数. "auto"取核心数与RX队列数较小值
    #threads: auto
    #disable-promisc: false
    # 驱动支持XDP时可选用XDP_DRV模式, 否则用XDP_SKB
    # 可选值:
    #  - drv: 启用XDP_DRV模式
    #  - skb: 启用XDP_SKB模式
    #  - none: 禁用(内核决定模式)
    #force-xdp-mode: none
    # socket绑定时内核先尝试零拷贝, 失败回退到拷贝. 若再失败则绑定失败
    # 可显式配置绑定模式:
    #  - zero: 启用零拷贝
    #  - copy: 启用拷贝
    #  - none: 禁用(内核决定模式)
    #force-bind-mode: none
    # 内存对齐模式可选aligned与unaligned chunk mode. 默认aligned
    # 设为yes启用unaligned chunk mode
    # 注意: 需使用大页, 需确保足够页数
    #mem-unaligned: no
    # 以下选项配置prefer-busy-polling socket参数
    # 可编辑轮询时间与预算
    # 可选值:
    #  - yes: 启用(默认)
    #  - no: 禁用
    #enable-busy-poll: yes
    # busy-poll-time设置无数据时阻塞接收的忙轮询时间(微秒)
    #busy-poll-time: 20
    # busy-poll-budget为每批包预算
    #busy-poll-budget: 64
    # 以下两个调优项用于配置Linux OS NAPI上下文
    # 用于延迟中断启用, 改用看门狗定时器调度NAPI上下文
    # softirq NAPI将提前退出, 允许忙轮询
    # 正确设置这些调优项与忙轮询应能提升性能
    # 默认值:
    #gro-flush-timeout: 2000000
    #napi-defer-hard-irq: 2

dpdk:
  eal-params:
    proc-type: primary

  # DPDK捕获支持
  # RX队列(IPS模式下含TX队列)按1:1分配核心
  interfaces:
    - interface: 0000:3b:00.0 # NIC端口的PCIe地址
      # 线程: 可选"auto"或线程数
      # - auto使用所有核心
      # IPS模式下需指定核心数且两端接口必须匹配
      threads: auto
      # interrupt-mode: false # true切换为中断模式
      promisc: true # 混杂模式 - 捕获所有包
      multicast: true # 也启用多播包检测
      checksum-checks: true # 是否验证校验和
      checksum-checks-offload: true # 若可行将校验和验证卸载到网卡节省资源
      mtu: 1500 # 设备MTU(字节)
      # rss-hash-functions: 0x0 # 高级选项, 仅在使用未经测试的网卡并遇到RSS警告时使用
      # rss-hash-functions用十六进制0x01ab指定RSS hash函数标志 - 启动时加-vvv可见DumpRssFlags输出
      # 设为auto则用默认RSS hash函数(基于IP地址)

      # 近似计算接口mempool所需空间(字节): mempool-size * mtu
      # 确保分配足够大页
      # 内存池最佳大小(内存使用角度)为2的幂减一: n = (2^q - 1)
      mempool-size: 65535 # mbuf池元素数

      # mempool缓存大小必须小于等于:
      #     - RTE_MEMPOOL_CACHE_MAX_SIZE(默认512) 且
      #     - "mempool-size / 1.5"
      # 建议选择cache_size使"mempool-size modulo cache_size == 0"
      # 否则部分元素将永远留在池中不被使用
      # 设为0可禁用缓存, 避免缓存丢失对象
      # 若为空或设为auto, Suricata将尝试按上述建议设置缓存大小
      mempool-cache-size: 257
      rx-descriptors: 1024
      tx-descriptors: 1024
      #
      # Suricata IPS模式有三种 - none, tap, ips
      # - none: 仅IDS模式 - 禁用IPS功能(不转发包)
      # - tap: 转发所有包并生成告警(忽略DROP动作) 非DPDK TAP
      # - ips: 同tap但按规则丢弃标记的包
      copy-mode: none
      copy-iface: none # 或第二个接口的PCIe地址

    - interface: default
      threads: auto
      promisc: true
      multicast: true
      checksum-checks: true
      checksum-checks-offload: true
      mtu: 1500
      rss-hash-functions: auto
      mempool-size: 65535
      mempool-cache-size: 257
      rx-descriptors: 1024
      tx-descriptors: 1024
      copy-mode: none
      copy-iface: none


# 跨平台libpcap捕获支持 [修改网卡名]
pcap:
  - interface: eth0
    # Linux下pcap尝试使用mmap捕获, 用"buffer-size"作为ring总内存
    # 设为大于带宽1%的值
    #buffer-size: 16777216
    #bpf-filter: "tcp and port 25"
    # 接口校验和验证模式. 捕获时部分包因校验和计算已卸载到网卡而无效
    # 可选值:
    #  - yes: 强制校验和验证
    #  - no: 禁用校验和验证
    #  - auto: Suricata用统计方法检测是否启用校验和卸载(默认)
    # 警告: 需将capture.checksum-validation设为yes才生效
    #checksum-checks: auto
    # 使用修改版libpcap的加速卡(如Myricom)时, 可设采集线程数等于采集环数
    # 此时将threads设为N以启动N个线程监听同一接口
    #threads: 16
    # 设为no禁用混杂模式:
    #promisc: no
    # 设置snaplen, 未设置时若ioctl可获取MTU则取MTU, 否则全量捕获
    #snaplen: 1518
  # 默认值放此处
  - interface: default
    #checksum-checks: auto

# pcap文件读取设置
pcap-file:
  # 可选值:
  #  - yes: 强制校验和验证
  #  - no: 禁用校验和验证
  #  - auto: Suricata用统计方法检测是否启用校验和卸载(默认)
  # 警告: 需将checksum-validation设为yes才校验
  checksum-checks: auto

# 更多高级捕获选项(包括Netmap与PF_RING)见下方


##
## Step 4: 应用层协议配置
##

# 配置应用层解析器
#
# error-policy设置适用于所有应用层解析器. 可选值:
# "drop-flow", "pass-flow", "bypass", "drop-packet", "pass-packet", "reject" 或
# "ignore"(默认)
#
# protocols段详列各协议
#
# enabled选项取三值 - "yes", "no", "detection-only"
# "yes"启用检测与解析器, "no"禁用两者, "detection-only"仅启用协议检测(禁用解析器)
app-layer:
  # error-policy: ignore
  protocols:
    telnet:
      enabled: yes
    rfb:
      enabled: yes
      detection-ports:
        dp: 5900, 5901, 5902, 5903, 5904, 5905, 5906, 5907, 5908, 5909
    mqtt:
      enabled: yes
      # max-msg-length: 1mb
      # subscribe-topic-match-limit: 100
      # unsubscribe-topic-match-limit: 100
      # 每流最大活跃MQTT事务数
      # max-tx: 4096
    krb5:
      enabled: yes
    bittorrent-dht:
      enabled: yes
    snmp:
      enabled: yes
    ike:
      enabled: yes
    tls:
      enabled: yes
      detection-ports:
        dp: 443

      # 从client hello生成JA3/JA4指纹. 未指定则默认禁用, 但规则需要时启用
      #ja3-fingerprints: auto
      #ja4-fingerprints: auto

      # 加密通讯开始时的行为:
      # - default: 继续跟踪TLS会话, 检测协议异常, 检查tls_*关键字. 禁用未修改'content'签名检查
      # - bypass:  尽可能停止处理此流. 不再解析与检测. 如可能将流旁路卸载到内核或硬件
      # - full:    正常跟踪与检测. 未修改内容关键字签名也检查
      #
      # 最佳性能选'bypass'
      #
      #encryption-handling: default

    pgsql:
      enabled: no
      # PostgreSQL流重组大小. 默认完全跟踪
      stream-depth: 0
      # 每流最大活跃PostgreSQL事务数
      # max-tx: 1024
    dcerpc:
      enabled: yes
      # 每流最大活跃DCERPC事务数
      # max-tx: 1024
    ftp:
      enabled: yes
      # memcap: 64mb
    rdp:
      #enabled: yes
    ssh:
      enabled: yes
      #hassh: yes
    http2:
      enabled: yes
      # 每流最大活跃HTTP2流数
      #max-streams: 4096
      # 最大头部表大小
      #max-table-size: 65536
      # 头部+continuation帧最大重组大小
      #max-reassembly-size: 102400
    smtp:
      enabled: yes
      raw-extraction: no
      # 每流最大活跃SMTP事务数
      # max-tx: 256
      # SMTP-MIME解码器配置
      mime:
        # 解码SMTP事务的MIME消息(可能高资源占用)
        # 此项覆盖其他所有项, 因其整体开关
        decode-mime: yes

        # 解码MIME实体体(如Base64, quoted-printable等)
        decode-base64: yes
        decode-quoted-printable: yes

        # 数据结构存储的每头数据值最大字节数(默认2000)
        header-value-depth: 2000

        # 提取URL并保存到状态数据结构
        extract-urls: yes
        # 提取URL的协议
        # (默认为[http])
        #extract-urls-schemes: [http, https, ftp, mailto]
        # 记录提取URL的协议
        # (默认为no)
        #log-url-scheme: yes
        # 设为yes计算邮件体md5. 可记录日志
        body-md5: no
      # file_data关键字的inspected-tracker配置
      inspected-tracker:
        content-limit: 100000
        content-inspect-min-size: 32768
        content-inspect-window: 4096
    imap:
      enabled: detection-only
    smb:
      enabled: yes
      detection-ports:
        dp: 139, 445
      # 每流最大活跃SMB事务数
      # max-tx: 1024

      # SMB流的流重组大小. 默认完全跟踪
      #stream-depth: 0

    nfs:
      enabled: yes
      # max-tx: 1024
    tftp:
      enabled: yes
    dns:
      tcp:
        enabled: yes
        detection-ports:
          dp: 53
      udp:
        enabled: yes
        detection-ports:
          dp: 53
    http:
      enabled: yes

      # 字节范围容器默认设置
      # byterange:
      #   memcap: 100mb
      #   timeout: 60

      # memcap:                   HTTP最大内存容量
      #                           默认无限制, 可写64mb等

      # default-config:           无匹配server-config时使用
      #   personality:            默认使用的个性列表
      #   request-body-limit:     请求体重组限制供http_client_body及pcre /P选项检查
      #   response-body-limit:    响应体重组限制供file_data, http_server_body及pcre /Q选项检查
      #
      #   高级选项见用户指南


      # server-config:            地址匹配时使用的服务器配置列表
      #   address:                此块使用的IP地址或网络列表
      #   personality:            此块使用的个性列表
      #
      #   可重载default-config中所有字段
      #
      # 当前可用个性:
      #   Minimal, Generic, IDS(默认), IIS_4_0, IIS_5_0, IIS_5_1, IIS_6_0,
      #   IIS_7_0, IIS_7_5, Apache_2
      libhtp:
         default-config:
           personality: IDS

           # 可写kb, mb, gb. 纯数字表示字节
           request-body-limit: 100kb
           response-body-limit: 100kb

           # 检查限制
           request-body-minimal-inspect-size: 32kb
           request-body-inspect-window: 4kb
           response-body-minimal-inspect-size: 40kb
           response-body-inspect-window: 16kb

           # 响应体解压层数限制(0禁用)
           response-body-decompress-layer-limit: 2

           # auto将在IPS模式使用http-body-inline, yes/no静态设置
           http-body-inline: auto

           # 解压SWF文件. 默认禁用
           # 两种: 'deflate', 'lzma', 'both'解压deflate与lzma
           # compress-depth:
           # 指定最大解压数据量, 0无限制
           # decompress-depth:
           # 指定最大解压后数据量, 0无限制
           swf-decompression:
             enabled: no
             type: both
             compress-depth: 100kb
             decompress-depth: 100kb

           # 在指定值附近随机化检查大小, 降低规避技术风险, 但可能导致检测变化. 默认yes
           #randomize-inspection-sizes: yes
           # 若启用, 各检查大小在[1 - range%, 1 + range%]范围内
           # randomize-inspection-range默认为10
           #randomize-inspection-range: 10

           # 解码
           double-decode-path: no
           double-decode-query: no

           # 启用LZMA解压
           #lzma-enabled: false
           # LZMA解压字典内存限制
           # 字典达此大小时停止解压
           #lzma-memlimit: 1mb
           # 压缩比超2048时的最大解压大小(仅LZMA可达此比)
           #compression-bomb-limit: 1mb
           # 单事务最大解压耗时(微秒)
           #decompression-time-limit: 100000
           # 每流最大活跃事务数
           #max-tx: 512
           # 单请求或响应最大HTTP1头数
           #headers-limit: 1024

         server-config:

           #- apache:
           #    address: [192.168.1.0/24, 127.0.0.0/8, "::1"]
           #    personality: Apache_2
           #    # 可写kb, mb, gb. 纯数字表示字节
           #    request-body-limit: 4096
           #    response-body-limit: 4096
           #    double-decode-path: no
           #    double-decode-query: no

           #- iis7:
           #    address:
           #      - 192.168.0.0/24
           #      - 192.168.10.0/24
           #    personality: IIS_7_0
           #    # 可写kb, mb, gb. 纯数字表示字节
           #    request-body-limit: 4096
           #    response-body-limit: 4096
           #    double-decode-path: no
           #    double-decode-query: no

    # 注意: Modbus探测解析器极简单, 因现场使用有限
    # 仅检查Modbus消息长度(大于Modbus头)及协议ID(等于0)
    # 需启用检测端口并定义Modbus端口以避免误报
    modbus:
      # 多少未应答Modbus请求视为泛洪
      # 达此限制将匹配app-layer-event:modbus.flooded;
      #request-flood: 500

      enabled: no
      detection-ports:
        dp: 502
      # 据MODBUS TCP/IP实现指南V1.0b, 建议与远程设备保持TCP连接打开
      # 勿为每个事务开关连接. 此时需将流重组深度设为无限制(stream.reassembly.depth: 0)

      # Modbus流重组大小. 默认完全跟踪
      stream-depth: 0

    # DNP3
    dnp3:
      enabled: no
      detection-ports:
        dp: 20000

    # SCADA EtherNet/IP及CIP协议支持
    enip:
      enabled: no
      detection-ports:
        dp: 44818
        sp: 44818

    ntp:
      enabled: yes

    quic:
      enabled: yes

    dhcp:
      enabled: yes

    sip:
      #enabled: yes

# 解码ASN1帧数上限(默认256)
asn1-max-frames: 256

# Datasets默认设置
datasets:
  # datasets的默认回退memcap与hashsize值, 当未显式定义时
  defaults:
    #memcap: 100mb
    #hashsize: 2048

  # 每条规则dataset实例限制, 避免规则占用过多资源
  # 注意: Suricata 8内置默认值将降低
  limits:
    # 单dataset `hashsize`设置最大值
    #single-hashsize: 262144
    # 所有dataset组合hashsize最大值
    #total-hashsizes: 67108864

  rules:
    # 设为true允许规则中绝对路径及用".."引用上级目录
    #allow-absolute-filenames: false

    # 允许规则dataset写权限用于"save"与"state". 默认启用, 但写权限仅限数据目录
    #allow-write: true

##############################################################################
##
## 下方高级设置
##
##############################################################################

##
## 运行选项
##

# 以特定用户与组运行Suricata:
#run-as:
#  user: suri
#  group: suri

security:
  # 设为true则通过setrlimit(RLIMIT_NPROC, 0)禁止Suricata创建进程
  limit-noproc: true
  # Linux下使用landlock安全模块
  landlock:
    enabled: no
    directories:
      #write:
      #  - /var/run/
      # /usr与/etc目录加入只读列表以支持file magic
      read:
        - /usr/
        - /etc/
        - /etc/suricata/

  lua:
    # 允许Lua规则. 默认禁用
    #allow-rules: false

# 某些日志模块将用此名作为事件标识. 默认为主机名
#sensor-name: suricata

# pid文件默认位置. 仅在守护模式(用-D启动)使用. 非守护模式需用--pidfile命令行选项创建pid文件
#pid-file: /var/run/suricata.pid

# 守护进程工作目录
# Suricata将切至此目录(若提供)
# 默认: "/"
#daemon-directory: "/"

# Umask
# Suricata将用此umask(若提供). 默认使用shell传递的umask
#umask: 022

# Suricata core dump配置. 限制core文件大小约max-dump. 实际大小为页大小倍数
# 超出max-dump的core将被截断. Linux上实际core文件可能略大于max-dump
# 设max-dump为0禁用core dump
# 设max-dump为'unlimited'将生成完整core文件
# 32位Linux上max-dump>=ULONG_MAX可能导致core大小为'unlimited'

coredump:
  max-dump: unlimited

# 若Suricata为嗅探网络的路由器, 设为'router'. 纯嗅探设'sniffer-only'
# 设为auto时, IPS模式内部切为'router', IDS模式切为'sniffer-only'
# 此特性目前仅reject*关键字使用
host-mode: auto

# 每线程预分配包数. 默认1024. 更高值确保CPU更忙, 但可能影响缓存
#max-pending-packets: 1024

# 引擎使用的运行模式. 请检查--list-runmodes获取各捕获方法可用运行模式
# 默认值取决于所选捕获方法. 'workers'通常性能最佳
#runmode: autofp

# 指定flow pinned autofp模式使用的流负载均衡器类型
#
# 支持调度器:
#
# hash     - 用5-7元组hash分配流到线程
# ippair   - 仅用地址分配流到线程
# ftp-hash - 用hash分配流, FTP除外, ftp-data流由同一线程处理
#
#autofp-scheduler: hash

# 每包预分配大小. 默认1514为Ethernet经典pcap大小
# 应设为系统最大包大小(MTU+硬件头)
#default-packet-size: 1514

# Unix命令socket, 可用于向Suricata发送命令
# 外部工具可连接以获取信息或触发引擎修改. 设enabled为yes启用
# filename变量可设socket文件名
unix-command:
  enabled: yes
  filename: /var/run/suricata-command.socket

# Magic文件. 自动加.mgc扩展
#magic-file: /usr/share/file/magic
#magic-file: 

# GeoIP2数据库文件. 若规则用"geoip"选项, 指定GeoIP2库路径
#geoip-database: /usr/local/share/GeoLite2/GeoLite2-Country.mmdb

legacy:
  uricontent: enabled


##
## 检测设置
##

# 根据动作设置告警顺序
# 默认顺序为 pass, drop, reject, alert
# action-order:
#   - pass
#   - drop
#   - reject
#   - alert

# 定义同一数据包可能触发的最大告警数. 默认为15
#packet-alert-max: 15

# 异常策略
#
# 为所有异常策略定义统一行为
# IPS模式下默认为drop-flow. 若无法实现, 引擎回退到drop-packet. 若要回退旧行为(单独设置或全部忽略), 设为ignore
# 所有异常策略值均可用, 并额外提供选项: auto - 表示IPS模式下为drop-flow或drop-packet(如上), IDS模式为ignore. 异常策略值含: drop-packet,
# drop-flow, reject, bypass, pass-packet, pass-flow, ignore(禁用)
exception-policy: auto

# IP信誉
#reputation-categories-file: /etc/suricata/iprep/categories.txt
#default-reputation-path: /etc/suricata/iprep
#reputation-files:
# - reputation.list

# 使用--engine-analysis运行时, 引擎将读取以下参数, 打印启用部分的报告并退出
# 报告输出到"default-log-dir"指定的默认日志目录下的文件中, engine reporting小节中的报告将写入自己的报告文件
engine-analysis:
  # 启用为每条规则打印fast-pattern报告
  rules-fast-pattern: yes
  # 启用为每条规则打印报告
  rules: yes

# 支持时PCRE的递归与匹配限制
pcre:
  match-limit: 3500
  match-limit-recursion: 1500

##
## 高级流量跟踪与重组设置
##

# 针对主机的去分片与TCP流重组策略. 主机OS查找使用radix树, 类似路由表, 最具体条目匹配
host-os-policy:
  # 默认策略设为windows
  windows: [0.0.0.0/0]
  bsd: []
  bsd-right: []
  old-linux: []
  linux: []
  old-solaris: []
  solaris: []
  hpux10: []
  hpux11: []
  irix: []
  macos: []
  vista: []
  windows2k3: []

# 去分片设置:

# memcap-policy值可为"drop-packet", "pass-packet", "reject"或"ignore"(默认)
defrag:
  memcap: 32mb
  # memcap-policy: ignore
  hash-size: 65536
  trackers: 65535 # 跟踪的去分流数量
  max-frags: 65535 # 保持的分片数(高于trackers)
  prealloc: yes
  timeout: 60

# 启用按主机去分片设置
#  host-config:
#
#    - dmz:
#        timeout: 30
#        address: [192.168.1.0/24, 127.0.0.0/8, 1.1.1.0/24, 2.2.2.0/24, "1.1.1.1", "2.2.2.2", "::1"]
#
#    - lan:
#        timeout: 45
#        address:
#          - 192.168.0.0/24
#          - 192.168.10.0/24
#          - 172.16.14.0/24

# 流设置:
# 默认流保留内存(memcap)为32MB. 这是引擎内流分配的上限. 可改此值允许流使用更多内存
# hash-size决定引擎内标识流的hash大小, 默认为65536
# 启动时引擎可预分配若干流以提升性能, 默认预分配10000条流
# emergency-recovery是引擎需修剪的流百分比, 以清除紧急状态. 当达memcap限制时激活紧急状态,
#  允许创建新流但用紧急超时修剪(定义如下)
# 若达memcap, 引擎先尝试用默认超时修剪流. 若找不到可修剪流, 设紧急位并用更激进超时重试
#  若仍失败, 则尝试按最后活动时间杀掉最老流
# memcap可写kb, mb, gb, 纯数字表示字节
# memcap-policy可为"drop-packet", "pass-packet", "reject"或"ignore"(默认)

flow:
  memcap: 128mb
  #memcap-policy: ignore
  hash-size: 65536
  prealloc: 10000
  emergency-recovery: 30
  #managers: 1 # 默认为一个流管理器
  #recyclers: 1 # 默认为一个流回收线程

# 此选项控制流(与去分片)hash中VLAN ID的使用. 通常应启用, 但某些(异常)环境中流两端VLAN标签不同,
#  此时可忽略VLAN ID
vlan:
  use-for-tracking: true

# 此选项控制流(与去分片)hash中livedev ID的使用. 默认启用, 若用多个实时设备捕获同一网络流量,
#  应禁用
livedev:
  use-for-tracking: true

# 流的特定超时. 此处可指定活跃流从当前状态转移到另一状态的等待时间, 按协议
# "new"值决定握手或流启动后多少秒内未收到更多包则释放流数据但不转为established
# "established"为未收新包或连接关闭时引擎等待释放流的秒数
# "closed"为流关闭后等待的秒数(通常为零)
# "bypassed"超时控制本地旁路流, 这些流不再跟踪, 超时后丢弃
#
# 紧急模式在攻击情况下激活, 使引擎更快检查流状态. 配置变量带"emergency-"前缀, 功能类似普通
#  超时. 部分超时如"closed"不适用于所有协议

flow-timeouts:

  default:
    new: 30
    established: 300
    closed: 0
    bypassed: 100
    emergency-new: 10
    emergency-established: 100
    emergency-closed: 0
    emergency-bypassed: 50
  tcp:
    new: 60
    established: 600
    closed: 60
    bypassed: 100
    emergency-new: 5
    emergency-established: 100
    emergency-closed: 10
    emergency-bypassed: 50
  udp:
    new: 30
    established: 300
    bypassed: 100
    emergency-new: 10
    emergency-established: 100
    emergency-bypassed: 50
  icmp:
    new: 30
    established: 300
    bypassed: 100
    emergency-new: 10
    emergency-established: 100
    emergency-bypassed: 50

# 流引擎设置. 此处配置TCP流跟踪与重组引擎
#
# stream:
#   memcap: 64mb                # 可写kb, mb, gb. 纯数字为字节
#   memcap-policy: ignore       # 可为"drop-flow", "pass-flow", "bypass",
#                               # "drop-packet", "pass-packet", "reject"或"ignore". 默认ignore
#   checksum-validation: yes    # 验证接收包校验和. 若设为yes, 校验和无效包将不被流/应用层处理
#                               # 警告: 本地生成流量可能因硬件卸载校验和而无校验和
#                               # 可通过接口'checksum-checks'选项逐接口控制校验和处理
#   prealloc-sessions: 2048     # 每流线程预分配2k会话
#   midstream: false            # 不允许中途会话接管
#   midstream-policy: ignore    # 可为"drop-flow", "pass-flow", "bypass",
#                               # "drop-packet", "pass-packet", "reject"或"ignore". 默认ignore
#   async-oneside: false        # 不启用单端异步流处理
#   inline: no                  # 流内联模式
#   drop-invalid: yes           # 内联模式下丢弃流引擎认为无效包
#   max-syn-queued: 10          # 最大排队SYN数
#   max-synack-queued: 5        # 最大排队SYN/ACK数
#   bypass: no                  # 达stream.reassembly.depth时旁路包
#                               # 警告: 先达此深度的一方触发旁路
#   liberal-timestamps: false   # 所有时间戳按Linux策略处理. 更宽松. 默认启用
#
#   reassembly:
#     memcap: 256mb             # 可写kb, mb, gb. 纯数字为字节
#     memcap-policy: ignore     # 可为"drop-flow", "pass-flow", "bypass",
#                               # "drop-packet", "pass-packet", "reject"或"ignore". 默认ignore
#     depth: 1mb                # 可写kb, mb, gb. 纯数字为字节
#     toserver-chunk-size: 2560 # 至少此大小的块检查原始流
#                               # 可写kb, mb, gb. 纯数字为字节
#     toclient-chunk-size: 2560 # 至少此大小的块检查原始流
#                               # 可写kb, mb, gb. 纯数字为字节
#     randomize-chunk-size: yes # 在指定值附近随机化块大小
#                               # 降低某些规避技术风险, 但可能导致检测变化. 默认yes
#     randomize-chunk-range: 10 # 启用时块大小随机在(1 - randomize-chunk-range/100)*toserver-chunk-size
#                               # 与(1 + randomize-chunk-range/100)*toserver-chunk-size之间, 对toclient-chunk-size同理
#                               # 默认10
#
#     raw: yes                  # 启用或禁用'raw'重组
#                               # raw用于检测引擎内容检查
#
#     segment-prealloc: 2048    # 每线程预分配段数
#
#     check-overlap-different-data: true|false
#                               # 检查段是否与该位置已有数据不同
#                               # 内联模式自动启用, 或规则用stream-event:reassembly_overlap_different_data;时启用
#
stream:
  memcap: 64mb
  #memcap-policy: ignore
  checksum-validation: yes      # 拒绝错误校验和
  #midstream: false
  #midstream-policy: ignore
  inline: auto                  # auto表示IPS模式用内联, yes/no静态设置
  reassembly:
    # 实验性TCP紧急指针处理逻辑
    #urgent:
    #  policy: inline           # drop, inline, oob(1字节, 见RFC 6093 3.1), gap
    #  oob-limit-policy: drop
    memcap: 256mb
    #memcap-policy: ignore
    depth: 1mb                  # 重组1mb进流
    toserver-chunk-size: 2560
    toclient-chunk-size: 2560
    randomize-chunk-size: yes
    #randomize-chunk-range: 10
    #raw: yes
    #segment-prealloc: 2048
    #check-overlap-different-data: true

# 主机表:
#
# 主机表用于标记与每主机阈值子系统
#
host:
  hash-size: 4096
  prealloc: 1000
  memcap: 32mb

# IP Pair表:
#
# 用于xbits 'ippair'跟踪
#
#ippair:
#  hash-size: 4096
#  prealloc: 1000
#  memcap: 32mb

# 解码器设置

decoder:
  # Teredo解码器不完全准确, 有时将非Teredo检测为Teredo
  teredo:
    enabled: true
    # Teredo检测端口. 最多4个. 若未指定或设为'any', 对所有UDP包检测Teredo
    ports: $TEREDO_PORTS # 语法: '[3544, 1234]' 或 '3533' 或 'any'

  # VXLAN解码器最多分配4个UDP端口. 默认仅启用IANA分配端口4789
  vxlan:
    enabled: true
    ports: $VXLAN_PORTS # 语法: '[8472, 4789]' 或 '4789'

  # Geneve解码器最多分配4个UDP端口. 默认仅启用IANA分配端口6081
  geneve:
    enabled: true
    ports: $GENEVE_PORTS # 语法: '[6081, 1234]' 或 '6081'

  # 包最大解码层数
  # max-layers: 16

##
## 性能调优与分析
##

# 检测引擎构建内部签名组. 引擎允许指定使用配置文件以高效管理内存并保持良好性能
# profile关键字可用"low", "medium", "high"或"custom". 若用custom, 需在"custom-values"中定义值
# 通常选medium/high/low
#
# "sgh mpm-context"指示staging如何为签名组分派mpm上下文. "single"表示所有签名组头用单上下文
# "full"表示每组头一个mpm上下文. "auto"让引擎根据每组头收集的模式信息决定上下文分布
#
# inspection-recursion-limit用于限制内容检查代码递归调用. 某些载荷-签名组合可能在内容检查耗过多时间
# 参数为0则无递归限制. 未指定时默认为3000
detect:
  profile: medium
  custom-values:
    toclient-groups: 3
    toserver-groups: 25
  sgh-mpm-context: auto
  #inspection-recursion-limit: 3000
  # 若无应用层关键字, 尝试关联单条活跃事务用于规则
  # 允许在告警中记录应用层元数据, 但事务可能不相关
  # guess-applayer-tx: no
  # 设为yes则在捕获启动后加载签名. 减少IPS模式停机时间
  #delayed-detect: yes

  prefilter:
    # 默认预过滤设置. "mpm"仅创建MPM/fast_pattern引擎. "auto"还为其他关键字设置预过滤引擎
    # 用--list-keywords=all查看支持预过滤的关键字
    default: mpm

  # 上述分组值控制每方向创建的组数. 端口白名单强制端口独立成组
  # 极常见端口及含大量昂贵规则的端口将受益
  grouping:
    #tcp-whitelist: 53, 80, 139, 443, 445, 1433, 3306, 3389, 6666, 6667, 8080
    #udp-whitelist: 53, 135, 5060

  profiling:
    # 记录通过预过滤阶段的规则, 每包
    # 默认关闭. threshold设置决定多少规则通过预过滤才触发记录
    #inspect-logging-threshold: 200
    grouping:
      dump-to-disk: false
      include-rules: false      # 极冗长
      include-mpm-stats: false

# 选择在引擎扫描/搜索中使用的多模式算法
#
# 支持的算法:
# "ac"      - Aho-Corasick, 默认实现
# "ac-bs"   - Aho-Corasick, 减少内存实现
# "ac-ks"   - Aho-Corasick, "Ken Steele"变体
# "hs"      - Hyperscan, 构建时含Hyperscan支持时可用
#
# 默认mpm-algo值"auto"将在可用时用"hs", 否则用"ac"
#
# 所选mpm也决定签名组mpm上下文分布, 由detect.sgh-mpm-context配置指定
# 选"ac"作为mpm需将detect.sgh-mpm-context设为"single", 因ac内存需求, 除非规则集小
#  可内存容纳, 此时可用"full"配"ac". 其余mpm可"full"模式运行

mpm-algo: auto

# 选择单模式搜索的匹配算法
#
# 支持算法"bm"(Boyer-Moore)与"hs"(Hyperscan, 仅构建时含Hyperscan支持时可用)
#
# 默认"auto"在可用时用"hs", 否则用"bm"

spm-algo: auto

# Suricata多线程. 此处可影响线程
threading:
  set-cpu-affinity: no
  # 调优线程CPU亲和性. 每类线程可绑定特定CPU
  #
  # 以下两项适用于所有运行模式:
  # management-cpu-set用于流超时处理, 计数器
  # worker-cpu-set用于'worker'线程
  #
  # autofp模式下还适用:
  # receive-cpu-set用于捕获线程
  # verdict-cpu-set用于IPS判决线程
  #
  cpu-affinity:
    - management-cpu-set:
        cpu: [ 0 ]  # 仅这些CPU参与亲和设置
    - receive-cpu-set:
        cpu: [ 0 ]  # 仅这些CPU参与亲和设置
    - worker-cpu-set:
        cpu: [ "all" ]
        mode: "exclusive"
        # 显式用3线程, 不用detect-thread-ratio计算:
        # threads: 3
        prio:
          low: [ 0 ]
          medium: [ "1-2" ]
          high: [ 3 ]
          default: "medium"
    #- verdict-cpu-set:
    #    cpu: [ 0 ]
    #    prio:
    #      default: "high"
  #
  # 默认Suricata为每可用CPU/核心创建一个"detect"线程
  # 此设置控制此行为. 比值2表示每个CPU/核心创建2个detect线程
  #  如双核CPU将产生4个detect线程. 值小于1时创建更少线程
  #  双核CPU设0.5将创建1个detect线程. 无论如何至少创建1个detect线程
  #
  detect-thread-ratio: 1.0
  #
  # 默认线程栈大小保持默认. 若默认栈过小, 用以下配置更改
  # 注意如任何线程栈无法设为此值, 将发生致命错误
  #
  # 通常每线程栈大小不应超8MB
  #stack-size: 8mb

# Luajit有奇怪的内存要求, 其'states'需在进程内存前2G内
#
# 'luajit.states'控制预分配状态数
# 状态使用: 每检测脚本: 每检测线程1. 每输出脚本: 每脚本1
luajit:
  states: 128

# 分析设置. 仅构建时加--enable-profiling生效
#
profiling:
  # 每X包运行分析. 默认为1, 即分析每个包. 设为1024则每1024包分析一次
  # 采样率须为2的幂
  #sample-rate: 1024

  # 规则分析
  rules:

    # 此处可禁用分析, 但如编译进仍影响性能
    enabled: yes
    filename: rule_perf.log
    append: yes
    # 设为yes启动时启用规则分析
    # 设为no(默认), 需通过unix socket命令启动规则分析
    #active:no

    # 排序选项: ticks, avgticks, checks, matches, maxticks
    # 如注释则使用所有排序选项
    #sort: avgticks

    # 退出时显示统计的sid数限制(每种排序)
    limit: 10

    # 输出到json
    json: yes

  # 每关键字分析
  keywords:
    enabled: yes
    filename: keyword_perf.log
    append: yes

  prefilter:
    enabled: yes
    filename: prefilter_perf.log
    append: yes

  # 每规则组分析
  rulegroups:
    enabled: yes
    filename: rule_group_perf.log
    append: yes

  # 包分析
  packets:

    # 此处可禁用分析, 但如编译进仍影响性能
    enabled: yes
    filename: packet_stats.log
    append: yes

    # 每包csv输出
    csv:

      # 此处可禁用输出, 但如编译进仍影响性能
      enabled: no
      filename: packet_stats.csv

  # 锁分析. 仅构建时加--enable-profiling-locks可用
  locks:
    enabled: no
    filename: lock_stats.log
    append: yes

  pcap-log:
    enabled: no
    filename: pcaplog_stats.log
    append: yes


##
## Netfilter集成
##

# 在NFQ内联模式下运行, 可以使用模拟的非终结NFQUEUE判决
# 这允许通过以下规则将所有所需包发往Suricata:
#        iptables -I FORWARD -m mark ! --mark $MARK/$MASK -j NFQUEUE
# 下方可放标准过滤规则集. 要启用此模式, 需将mode设为'repeat'
# 若希望在ACCEPT决策后将包发往另一队列, 将mode设为'route'并设置next-queue值
# Linux>=3.1时, 可设batchcount>1以在处理多个包后再发判决(worker运行模式)提升性能
# Linux>=3.6时, 可设fail-open为yes使Suricata跟不上时内核直接接受包
# bypass mark与mask可用于实现NFQ旁路. 若设置bypass mark则激活NFQ旁路, Suricata将
# 对需旁路流的包设置bypass mark/mask, Netfilter规则集需在首个包被标记后直接接受该流所有包
nfq:
#  mode: accept
#  repeat-mark: 1
#  repeat-mask: 1
#  bypass-mark: 1
#  bypass-mask: 1
#  route-queue: 2
#  batchcount: 20
#  fail-open: yes

# nflog支持
nflog:
    # netlink多播组
    # (同iptables --nflog-group参数)
    # 组0由内核使用, 不可用
  - group: 2
    # netlink缓冲区大小
    buffer-size: 18432
    # 此处放默认值
  - group: default
    # 设置内核内排队包数
    qthreshold: 1
    # 设置内核队列刷新前延迟
    qtimeout: 100
    # netlink最大缓冲区大小
    max-size: 20000

##
## 高级捕获选项
##

# 影响包捕获的通用设置
capture:
  # 禁用网卡卸载. Suricata退出时恢复
  # 默认启用
  #disable-offloading: false
  #
  # 禁用校验和验证. 等同于命令行设'-k none'
  #checksum-validation: none

# Netmap支持 [修改网卡名]
#
# Netmap在驱动内直接与NIC交互, 需FreeBSD 11+(内置Netmap支持)或为Linux编译安装Netmap模块及对应NIC驱动
# 要达最大吞吐量, 需关闭NIC所有接收-、分片-、校验和卸载(用ethtool等)
# 连接OS端点与NIC端点时*必须*关闭TX校验和卸载
# 更多信息见https://github.com/luigirizzo/netmap
#
netmap:
   # 指定OS端点时在接口名后加加号(如"eth0+")
 - interface: eth2
   # 捕获线程数. "auto"使用接口RSS队列数
   # 警告: 除非RSS哈希对称, 否则会导致准确性问题
   #threads: auto
   # 以下变量可激活netmap tap或IPS模式
   # 若copy-mode设为ips或tap, 当前接口流量将复制到copy-iface接口. 设为tap则完整复制, 设为ips则匹配drop动作的包不复制
   # 指定OS为copy-iface时加加号(如"copy-iface: eth0+"). 勿忘为回包对称设置eth0+ -> eth0
   # 用OS端点时必须关闭接口硬件校验和(如FreeBSD: 'ifconfig eth0 -rxcsum -txcsum -rxcsum6 -txcsum6'
   # 或Linux: 'ethtool -K eth0 tx off rx off')
   #copy-mode: tap
   #copy-iface: eth3
   # 设为yes禁用混杂模式
   # disable-promisc: no
   # 接口校验和验证模式. 捕获时部分包因校验和已卸载到网卡而无效
   # 可选值:
   #  - yes: 强制校验和验证
   #  - no: 禁用校验和验证
   #  - auto: Suricata用统计方法检测是否启用校验和卸载(默认)
   # 警告: 需将checksum-validation设为yes才生效
   #checksum-checks: auto
   # 适用BPF过滤器. pcap过滤语法
   #bpf-filter: port 80 or udp
 #- interface: eth3
   #threads: auto
   #copy-mode: tap
   #copy-iface: eth2
   # 此处放默认值
 - interface: default

# PF_RING配置: 用于原生PF_RING支持 [修改网卡名]
# 更多信息见http://www.ntop.org/products/pf_ring/
pfring:
  - interface: eth0
    # 接收线程数. 设为'auto'时Suricata优先用CPU(核心)数, 否则用RSS队列数
    threads: auto

    # 默认clusterid. PF_RING将基于流负载均衡包
    # 所有参与线程/进程需用相同clusterid
    cluster-id: 99

    # 默认PF_RING集群类型. PF_RING可按流负载均衡
    # 可选值:
    # - cluster_flow:               6元组: <src ip, src_port, dst ip, dst port, proto, vlan>
    # - cluster_inner_flow:         6元组: <src ip, src port, dst ip, dst port, proto, vlan>
    # - cluster_inner_flow_2_tuple: 2元组: <src ip,           dst ip                       >
    # - cluster_inner_flow_4_tuple: 4元组: <src ip, src port, dst ip, dst port             >
    # - cluster_inner_flow_5_tuple: 5元组: <src ip, src port, dst ip, dst port, proto      >
    # - cluster_round_robin (不推荐)
    cluster-type: cluster_flow

    # 此接口的bpf过滤器
    #bpf-filter: tcp

    # 若设置bypass则激活PF_RING硬件旁路(网卡支持时). Suricata将指示网卡旁路需旁路流的后续包
    #bypass: yes

    # 接口校验和验证模式. 捕获时部分包因校验和已卸载到网卡而无效
    # 可选值:
    #  - rxonly: 仅计算网卡接收包的校验和
    #  - yes: 强制校验和验证
    #  - no: 禁用校验和验证
    #  - auto: Suricata用统计方法检测是否启用校验和卸载(默认)
    # 警告: 需将checksum-validation设为yes才生效
    #checksum-checks: auto
  # 第二接口
  #- interface: eth1
  #  threads: 3
  #  cluster-id: 93
  #  cluster-type: cluster_flow
  # 此处放默认值
  - interface: default
    #threads: 2

# FreeBSD ipfw(8) divert(4)支持
# 请确保/etc/loader.conf中ipfw_load="YES"和ipdivert_load="YES"
# 或kldload相应内核模块
# 还需ipfw规则让引擎看到ipfw的包. 例如:
#
#   ipfw add 100 divert 8000 ip from any to any
#
# 注意: 本例用"8000" -- 此数必须与命令行传入值匹配, 即 -d 8000
#
ipfw:

  # 在指定ipfw规则号重新注入包. 此配置选项为引擎检查接受后
  # ipfw处理系统继续处理的ipfw规则号. 若未指定规则号,
  # 接受包在入口divert规则处重新注入并继续IPFW规则处理. 不验证规则合理性
  # 需谨慎避免ipfw环路
  #
  ## 以下示例告诉引擎在规则号5500处将包重新注入ipfw防火墙:
  #
  # ipfw-reinjection-rule-number: 5500


napatech:
    # use_all_streams设为"yes"时, 初始化代码将查询Napatech服务获取所有配置流并监听全部
    # 设为"no"时用streams配置数组
    #
    # 此选项需先运行适当NTPL命令创建期望流再启动Suricata
    #use-all-streams: no

    # 禁用自动配置或禁用线程CPU亲和时监听的流. 可为:
    #   单个流(如 streams: [0])
    # 或
    #   流范围(如 streams: ["0-3"])
    #
    streams: ["0-3"]

    # 启用流统计可为每个配置的线程/流提供细粒度包与字节计数器
    #
    enable-stream-stats: no

    # 启用自动配置时, 流将自动创建并分配到线程所在NUMA节点. 若线程段启用cpu-affinity
    # 则按worker-cpu-set指定工作线程数创建流. 否则用streams数组定义流
    #
    # 此选项主要用于支持旧配置
    #
    # 此选项不能与"use-all-streams"或"hardware-bypass"同时使用
    #
    auto-config: yes

    # 启用硬件级流旁路
    #
    hardware-bypass: yes

    # 启用内联操作. 启用后某端口到达的流量经Suricata分析后自动从其配对端口转发
    #
    inline: no

    # ports指示自动配置模式下使用哪些Napatech端口
    # 这些端口ID将在流量分配到流前被合并
    #
    # 启用hardware-bypass时端口须配置为segment
    # 指定上行与下行流量到达的端口. 这些信息对硬件正确处理流是必需的
    #
    # 用tap配置时, 其中一个端口接收网络入向流量, 另一个接收出向流量. 同segment两端口须在同网卡
    #
    # 用SPAN口配置时上下行流量到达单端口. 通过将segment两侧设为同一端口配置(如0-0在端口0配置SPAN口)
    #
    # port segment格式:
    #    ports: [0-1,2-3,4-5,6-6,7-7]
    #
    # 旧系统hardware-bypass禁用时, 可用以下任一方式:
    #
    #   端口列表(如 ports: [0,1,2,3])
    #
    #   端口范围(如 ports: [0-3])
    #
    #   "all"表示合并所有端口
    #   (如 ports: [all])
    #
    # 禁用自动配置时此参数无效
    #
    ports: [0-1,2-3]

    # 启用自动配置时hashmode指定包送达流的算法
    # 可为任意合法Napatech NTPL hashmode命令
    #
    # 常用hashmode命令: hash2tuple, hash2tuplesorted, hash5tuple, hash5tuplesorted与roundrobin
    #
    # 详见Napatech NTPL文档了解其他hashmode及详情
    #
    # 禁用自动配置时此参数无效
    #
    hashmode: hash5tuplesorted

##
## 配置Suricata加载Suricata-Update管理的规则
##

default-rule-path: /var/lib/suricata/rules

rule-files:
  - suricata.rules

##
## 辅助配置文件
##

classification-file: /etc/suricata/classification.config
reference-config-file: /etc/suricata/reference.config
# threshold-file: /etc/suricata/threshold.config

##
## 包含其他配置
##

# include: 此处包含的文件将被视为内联于此配置文件. 相对路径文件将在本配置文件同目录查找
# 也可用绝对路径
#include:
#  - include1.yaml
#  - include2.yaml